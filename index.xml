<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>L0phTg&#39;s Blog</title>
    <link>https://l0phtg.github.io/</link>
    <description>Recent content on L0phTg&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>l0phtg</copyright>
    <lastBuildDate>Mon, 20 Aug 2018 21:38:52 +0800</lastBuildDate>
    
        <atom:link href="https://l0phtg.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>https://l0phtg.github.io/about/</link>
      <pubDate>Mon, 20 Aug 2018 21:38:52 +0800</pubDate>
      
      <guid>https://l0phtg.github.io/about/</guid>
      
        <description>&lt;p&gt;某邮电大学大四学生, 宅男一枚, 整日与电脑为生.&lt;/p&gt;

&lt;p&gt;从事方向: 移动安全.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>本科应届生安全岗面试总结</title>
      <link>https://l0phtg.github.io/post/%E6%9C%AC%E7%A7%91%E5%BA%94%E5%B1%8A%E7%94%9F%E5%AE%89%E5%85%A8%E5%B2%97%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 02 Apr 2019 11:24:31 +0800</pubDate>
      
      <guid>https://l0phtg.github.io/post/%E6%9C%AC%E7%A7%91%E5%BA%94%E5%B1%8A%E7%94%9F%E5%AE%89%E5%85%A8%E5%B2%97%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</guid>
      
        <description>&lt;p&gt;很久没有更新博客了, 主要原因是因为现在笔记都记在了有道云笔记中. 并且 很多篇文章都只写了一半, 也不想发出来.&lt;/p&gt;

&lt;p&gt;近期时间充裕, 应该会保持每周一更, 将以前写的或者近期学到的知识总结一下发在博客里.&lt;/p&gt;

&lt;p&gt;本篇文章是19年春节写的, 主要记录了自己在18年的几次面试记录, 和大学期间的一些学习经历.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;个人简介&#34;&gt;个人简介&lt;/h1&gt;

&lt;p&gt;L0phTg&lt;/p&gt;

&lt;p&gt;学习方向: 二进制, 移动安全.&lt;/p&gt;

&lt;p&gt;专业: 信息安全.&lt;/p&gt;

&lt;p&gt;签约: 滴滴出行.&lt;/p&gt;

&lt;h2 id=&#34;学习经历&#34;&gt;学习经历&lt;/h2&gt;

&lt;h3 id=&#34;大一&#34;&gt;大一&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;在未加入实验室之前, 我处于&amp;rdquo;野生, 放养&amp;rdquo;的状态
(就是没有目的的学习, 乱七八糟买了很多计算机类的书, 应该大多数人都经历过这个阶段, 其实在这个阶段就是要多了解熟悉各个计算机专业方向, 所以也没有必要一直苦恼, 分清主次, 打好基础就对了.)&lt;br /&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;大一主要学习了一段时间c/c++,( 此处推荐&amp;lt;&lt;c语言程序设计现代方法&gt;&amp;gt;、&amp;lt;&lt;c++Primer&gt;). 由于当时看到很多人推荐&amp;lt;&amp;lt;深入理解计算机系统&amp;gt;&amp;gt;, 所以耐不住诱惑, 就买了一本来看, 我的汇编知识最初就是在这本书上看到的.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;当然其实大一虽然没有过多接触信息安全领域的专业知识, 但是由于一直在微博, 知乎关注着很多安全届大佬, 对安全领域也有了基本的概念与印象, 知道安全基本分为web和二进制等之类, 也了解到安全届有heige和tk两位妇科圣手, 这些多少都给无聊的大学生活增添了许多乐趣.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;关于安全学习的方向其实确定起来不是那么容易的, 最初了解到的是余弦、heige，所以多少想从事web安全领域. 但是在最终确定学习方向的时候, 还是考虑了自己的实际情况, 自身学习路线与兴趣爱好.  在大一暑假, 总结了一下自己大一看过的书有关于c/c++的, 汇编的, 和w32的, 以及阅读了&amp;lt;&amp;lt;加密与解密&amp;gt;&amp;gt;, 而且熟悉了linux下的基本操作. 至于web方向的试探, 只是停留在w3c上看过一点h5. 所以, 理所当然的就决定了之后走二进制这条路线.(方向领域的确定还是要根据自己实际情况考虑, 如果不考研, 且决定大三要找工作的话)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;移动安全领域入门, 是在大二, 至于是发生了什么导致自己想要向android安全靠拢的, 保密.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;大二&#34;&gt;大二&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;大二在历经艰辛进入实验室后, 生活就比较顺风顺水了, 就抱着一本 &amp;lt;&amp;lt; android软件安全与逆向分析&amp;gt;&amp;gt; 看了一个学期, 大二上就是这么过的.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;大二下主要是接触了一些android逆向与脱壳, 跟着f8left的视频, 自己尝试着去调试.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;大二暑期尝试去绿盟实习, 无奈面试失败. (失败+1)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;大三&#34;&gt;大三&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;大三由于面临着找工作这个大难题, 所以想着做些什么能够让自己的简历有亮眼之处. 所以就想着写些项目.
所以大三上和寒假就一直在coding. 主要写了两个项目: 一个ptrace相关, 一个arm相关.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;大三下就是春招， 阿里腾讯面试失败. (失败+2)  (面试失败对自己的打击是很大的, 所以失败后自己也在反思总结, 然后期待之后的公司面试能够顺利通过, 具体面试体验等看下一部分)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;之后面试小米. (成功+1) 面试小米成功之后, 就直接去了小米实习, 几个月的实习生活中, 学习到了很多. (具体看之后的实习经历)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;大四&#34;&gt;大四&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;大四秋招.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;我的面试经历其实并不顺畅, 但是之后的内容不会写的太具体, 只写一些主要的, 希望对大家有所帮助.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;拿到offer之后. 追剧, 玩游戏, 看直播&amp;hellip;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;面试准备&#34;&gt;面试准备&lt;/h1&gt;

&lt;p&gt;其实面试的准备内容是根据自己的面试岗位变化的. 例如游戏安全偏c/c++, app安全可能会涉及java. 但是自己擅长的一定要多做准备. 可以根据每次面试自己的发挥, 以及面试官的提问重点, 来针对性的复习和学习.&lt;/p&gt;

&lt;p&gt;移动安全岗位问到的相关内容包括(简历上写的基本都可能会问到):
c/c++,
java,
smali,
android逆向,
简单数据结构和算法,
简单加密算法, 分组加密的模式
hook等.&lt;/p&gt;

&lt;h1 id=&#34;面试经历&#34;&gt;面试经历&lt;/h1&gt;

&lt;h2 id=&#34;春招&#34;&gt;春招&lt;/h2&gt;

&lt;p&gt;春招印象最深的是腾讯的几次面试:&lt;/p&gt;

&lt;p&gt;第一次面的是tx游戏安全, 由于自己当时对hook没有了解, 并且在最后回答c++方向的问题时, 表现不好, 所以gg. ( 但是这次面试失败后, 就疯狂恶补了hook方向的内容. 这也使得自己在秋招面试一些公司时, 得以不在hook方向被打出gg)&lt;/p&gt;

&lt;p&gt;还有一次也是tx的另一个二进制部门, 面试失败的原因, 我归结为自己没有对一些安全知识做过总结. 所以在面试时, 发挥不好. (经常性的总结自己学过的知识, 是挺重要的. 这次面试失败之后, 就开了个有道云笔记会员, 硬广一波, 主要优势 跨平台. hhhhaaa.)&lt;/p&gt;

&lt;p&gt;小米面试, 是我春招的结尾, 一周面了三面技术面, 体验最好.
一面组长面, 对我写的一个项目问了有40min, 注意, 一个项目, 问到我怀疑人生. 二面: 智力面? 问了几个算法, 回答的一般, 但还是挺过去了. 终面(boss面): 自己在经历过春招的几场面试失败后, 对android安全做了一些系统的总结. 所以boss在问到对android安全的认识和了解的时候, 以及linker模块的时候,  把自己系统总结过的表达出来, 就通过面试了.&lt;/p&gt;

&lt;h2 id=&#34;秋招&#34;&gt;秋招&lt;/h2&gt;

&lt;p&gt;在经历过春招之后, 秋招相对来说轻松一些. 因为自己相对来说有了更多的经验, 也基本不会惨死在基础知识上(但还是有), 就算参加有些公司的面试, 即使失败了, 也没有那么多的抱怨和后悔.&lt;/p&gt;

&lt;h2 id=&#34;实习经历&#34;&gt;实习经历&lt;/h2&gt;

&lt;p&gt;实习时间(2018-4-15~~2018-8.30).&lt;/p&gt;

&lt;p&gt;实习单位: 小米MIUI系统组.&lt;/p&gt;

&lt;p&gt;在小米实习的日子, 是非常开心快乐的, 我也慢慢地从一个路人变成了一个米粉. 在实习期间, 学习到了很多:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;刷机.&lt;/li&gt;
&lt;li&gt;gdb调试android系统和应用.&lt;/li&gt;
&lt;li&gt;对android底层的art虚拟机有了一定的了解.&lt;/li&gt;
&lt;li&gt;method hook.&lt;/li&gt;
&lt;li&gt;总结了很多android加固方法.&lt;/li&gt;
&lt;li&gt;实现了一个加固demo.&lt;/li&gt;
&lt;/ul&gt;</description>
      
    </item>
    
    <item>
      <title>我的zsh和vim配置</title>
      <link>https://l0phtg.github.io/post/%E6%88%91%E7%9A%84zsh%E5%92%8Cvim%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 24 Oct 2018 00:14:31 +0800</pubDate>
      
      <guid>https://l0phtg.github.io/post/%E6%88%91%E7%9A%84zsh%E5%92%8Cvim%E9%85%8D%E7%BD%AE/</guid>
      
        <description>&lt;p&gt;总结了一下自己的vim配置和zsh配置&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://l0phtg.github.io/customConfig/myVimPreview.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;zsh配置&#34;&gt;zsh配置&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;https://github.com/robbyrussell/oh-my-zsh&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;powerline字体设置&#34;&gt;powerline字体设置&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://dwijaybane.wordpress.com/2017/12/04/oh-my-zsh-and-powerline-fonts-setup-for-awesome-terminal-in-ubuntu-16-04/&#34;&gt;https://dwijaybane.wordpress.com/2017/12/04/oh-my-zsh-and-powerline-fonts-setup-for-awesome-terminal-in-ubuntu-16-04/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;我的插件&#34;&gt;我的插件&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;plugins=(git autojump web-search last-working-dir zsh-syntax-highlighting colored-man-pages extract zsh-proxychains-ng adb pip npm python)
#plugins=(git autojump last-working-dir adb pip npm python)&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;vim配置&#34;&gt;vim配置&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;当你使用&lt;code&gt;vim&lt;/code&gt;时, 可以在&lt;code&gt;~/.vimrc&lt;/code&gt;中编写你的vim配置文件.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;当你使用&lt;code&gt;neovim&lt;/code&gt;时, 可以在&lt;code&gt;~/.config/nvim/init.vim&lt;/code&gt;中编写你的vim配置文件.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;插件&#34;&gt;插件&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;插件管理&lt;code&gt;vim-plug&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;tagbar&lt;/li&gt;
&lt;li&gt;airline&lt;/li&gt;
&lt;li&gt;vimfilter&lt;/li&gt;
&lt;li&gt;vim-bufabline buffer窗口&lt;/li&gt;
&lt;li&gt;fzf和ag 搜索&lt;/li&gt;
&lt;li&gt;括号补全&amp;rsquo;Raimondi/delimitMate&amp;rsquo;&lt;/li&gt;
&lt;li&gt;include补全 neoinclude&lt;/li&gt;
&lt;li&gt;语法补全jedi-vim(python)&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;vim-plug-vim插件管理工具&#34;&gt;&lt;code&gt;vim-plug&lt;/code&gt; vim插件管理工具&lt;/h4&gt;

&lt;p&gt;README: &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;https://github.com/junegunn/vim-plug&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;安装&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;a. 当你使用&lt;code&gt;vim&lt;/code&gt;时.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;b. 当你使用`neovim时.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;使用&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;a. 可以使用git链接&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;Plug &amp;#39;https://github.com/junegunn/vim-github-dashboard.git&amp;#39;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;b. 使用git&lt;code&gt;UserName/Project&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;Plug &amp;#39;junegunn/vim-easy-align&amp;#39;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更多可以参考文档.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;安装插件&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;只是把要安装的插件写在配置文件中是不够的, 还需要安装.&lt;/p&gt;

&lt;p&gt;写好配置文件后, 重新打开vim, 运行&lt;code&gt;PlugInstall&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;例子:(我的部分配置)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;call plug#begin()

Plug &amp;#39;NLKNguyen/papercolor-theme&amp;#39;
Plug &amp;#39;vim-airline/vim-airline&amp;#39;
Plug &amp;#39;vim-airline/vim-airline-themes&amp;#39;
Plug &amp;#39;Shougo/denite.nvim&amp;#39;
Plug &amp;#39;Shougo/unite.vim&amp;#39;
Plug &amp;#39;Shougo/vimfiler&amp;#39;
Plug &amp;#39;majutsushi/tagbar&amp;#39;
Plug &amp;#39;ap/vim-buftabline&amp;#39;
Plug &amp;#39;Shougo/deoplete.nvim&amp;#39;, { &amp;#39;do&amp;#39;: &amp;#39;:UpdateRemotePlugins&amp;#39; }
Plug &amp;#39;rip-rip/clang_complete&amp;#39;
Plug &amp;#39;SirVer/ultisnips&amp;#39;           &amp;#34; 代码片段补全  模板补全
Plug &amp;#39;honza/vim-snippets&amp;#39;
Plug &amp;#39;zchee/deoplete-jedi&amp;#39;

Plug &amp;#39;scrooloose/nerdcommenter&amp;#39;   &amp;#34; 自动注释   &amp;lt;leader&amp;gt;cc  注释当先选中文本  
Plug &amp;#39;ctrlpvim/ctrlp.vim&amp;#39;

Plug &amp;#39;lvht/tagbar-markdown&amp;#39;       &amp;#34; markdown  tagbar显示

Plug &amp;#39;~/.fzf&amp;#39;
Plug &amp;#39;junegunn/fzf.vim&amp;#39;

call plug#end()&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;tagbar&#34;&gt;&lt;code&gt;tagbar&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;README: &lt;a href=&#34;https://github.com/majutsushi/tagbar&#34;&gt;https://github.com/majutsushi/tagbar&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;安装&lt;code&gt;ctags&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;$sudo apt install ctags&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;vim中配置&lt;code&gt;tagbar&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;call plug#begin()
Plug &amp;#39;majutsushi/tagbar&amp;#39;
call plug#end()

let g:tagbar_width=30
let g:tagbar_left=1

&amp;#34;映射F2快捷键为打开tagbar
nnoremap &amp;lt;F2&amp;gt; :TagbarToggle &amp;lt;CR&amp;gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;airline-主题&#34;&gt;&lt;code&gt;airline&lt;/code&gt; 主题&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/vim-airline/vim-airline&#34;&gt;https://github.com/vim-airline/vim-airline&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;call plug#begin()

Plug &amp;#39;NLKNguyen/papercolor-theme&amp;#39;           // 这是我自己的主题
Plug &amp;#39;vim-airline/vim-airline&amp;#39;
Plug &amp;#39;vim-airline/vim-airline-themes&amp;#39;

call plug#end()

let g:airline_theme=&amp;#39;papercolor&amp;#39;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;vimfilter-文件树&#34;&gt;&lt;code&gt;vimfilter&lt;/code&gt; 文件树&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;call plug#begin()
Plug &amp;#39;Shougo/vimfiler&amp;#39;
call plug#end()

&amp;#34;我设置的打开vimfilter的对应快捷键为F3
nnoremap &amp;lt;F3&amp;gt; :VimFilerExplorer -split -direction=rightbelow &amp;lt;CR&amp;gt;          &lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;vim-bufabline-buffer窗口&#34;&gt;&lt;code&gt;vim-bufabline&lt;/code&gt; buffer窗口&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;call plug#begin()
Plug &amp;#39;ap/vim-buftabline&amp;#39;
call plug#end()

&amp;#34;映射对应的快捷键为打开对应的buffer
nmap &amp;lt;leader&amp;gt;1 &amp;lt;Plug&amp;gt;BufTabLine.Go(1)
nmap &amp;lt;leader&amp;gt;2 &amp;lt;Plug&amp;gt;BufTabLine.Go(2)
nmap &amp;lt;leader&amp;gt;3 &amp;lt;Plug&amp;gt;BufTabLine.Go(3)
nmap &amp;lt;leader&amp;gt;4 &amp;lt;Plug&amp;gt;BufTabLine.Go(4)
nmap &amp;lt;leader&amp;gt;5 &amp;lt;Plug&amp;gt;BufTabLine.Go(5)
nmap &amp;lt;leader&amp;gt;6 &amp;lt;Plug&amp;gt;BufTabLine.Go(6)
nmap &amp;lt;leader&amp;gt;7 &amp;lt;Plug&amp;gt;BufTabLine.Go(7)
nmap &amp;lt;leader&amp;gt;8 &amp;lt;Plug&amp;gt;BufTabLine.Go(8)
nmap &amp;lt;leader&amp;gt;9 &amp;lt;Plug&amp;gt;BufTabLine.Go(9)
nmap &amp;lt;leader&amp;gt;0 &amp;lt;Plug&amp;gt;BufTabLine.Go(10)&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;fzf-和-ag&#34;&gt;fzf 和 ag&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://l0phtg.github.io/customConfig/fileContentSearch.png&#34; alt=&#34;目录下的全部文件内容搜索&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;下载安装fzf&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
~/.fzf/install&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;vim 中配置fzf&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;插件使用&lt;code&gt;vim-plug&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;Plug &amp;#39;~/.fzf&amp;#39;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;ag安装&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ubuntu&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;$sudo apt-get install silversearcher-ag&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;快捷键映射&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在我的vim中, &lt;leader&gt;映射为了&lt;code&gt;space&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;noremap &amp;lt;leader&amp;gt;sff :Files&amp;lt;CR&amp;gt;
noremap &amp;lt;leader&amp;gt;ssf :Lines&amp;lt;CR&amp;gt;
noremap &amp;lt;leader&amp;gt;sbf :BLines&amp;lt;CR&amp;gt; 
noremap &amp;lt;leader&amp;gt;ss  :Ag&amp;lt;CR&amp;gt;

noremap &amp;lt;leader&amp;gt;gls :GFiles&amp;lt;CR&amp;gt;
noremap &amp;lt;leader&amp;gt;gss :GFiles?&amp;lt;CR&amp;gt;   

noremap &amp;lt;leader&amp;gt;btag :Tags&amp;lt;CR&amp;gt;
noremap &amp;lt;leader&amp;gt;stag :BTags&amp;lt;CR&amp;gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;使用&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;:BTags&lt;/code&gt; 可以在当前目录下build tags, &lt;code&gt;前提系统已经ctags&lt;/code&gt;(apt install ctags)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;:Tags&lt;/code&gt; 可以搜索tag. 在搜索前, 要先build tags. (可以自行阅读fzf doc, 应该可以在vim启动时自动build tags).&lt;/p&gt;

&lt;p&gt;当前文件内容搜索:
&lt;img src=&#34;https://l0phtg.github.io/customConfig/singleFileContentSearch.png&#34; alt=&#34;当前文件内容搜索&#34; /&gt;
当前目录的文件搜索:
&lt;img src=&#34;https://l0phtg.github.io/customConfig/searchFile.png&#34; alt=&#34;当前目录的文件搜索&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;括号补全-raimondi-delimitmate&#34;&gt;括号补全&amp;rsquo;Raimondi/delimitMate&amp;rsquo;&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;call plug#begin()
Plug &amp;#39;Raimondi/delimitMate&amp;#39;       &amp;#34; 补全, \&amp;#34; \( 等.
call plug#end()&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;c-c-llvm头文件补全-neoinclude&#34;&gt;c/c++/llvm头文件补全 neoinclude&lt;/h4&gt;

&lt;p&gt;头文件补全需要设置头文件path, (&lt;strong&gt;注意, 是vim配置文件中的path, 而不是系统环境变量的path&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;我使用的是nvim, 配置文件是~/config/nvim/init.vim&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&amp;#34; ~/.config/nvim/init.vim

set path=.,/usr/include/c++/5,/usr/include,/home/l0phtg/tools/llvm-project/llvm/include

call plug#begin()
Plug &amp;#39;Shougo/neoinclude.vim&amp;#39;
call plug#end()&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;我的配置&#34;&gt;我的配置&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;set nu

let mapleader= &amp;#39; &amp;#39;
let g:mapleader = &amp;#39; &amp;#39;


syntax on

filetype on

filetype indent on

filetype plugin on

filetype plugin indent on

&amp;#34; 标签页
set tabpagemax=20
set showtabline=2

&amp;#34; 设置文件浏览器目录为当前目录
set bsdir=buffer


&amp;#34; 突出显示当前行
set cursorline

&amp;#34; 突出显示当前列
&amp;#34; set cursorcolumn

&amp;#34; 括号配对情况, 跳转并高亮匹配的括号
set showmatch
&amp;#34;
set matchtime=2

&amp;#34; 相对行号: 行号变成相对
set relativenumber number

set encoding=utf-8

set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set helplang=cn

set rtp+=~/.fzf                  &amp;#34; fzf 

set path=.,/usr/include/c++/5,/usr/include,/home/l0phtg/tools/llvm-project/llvm/include



&amp;#34;plug插件

call plug#begin()

Plug &amp;#39;NLKNguyen/papercolor-theme&amp;#39;
Plug &amp;#39;vim-airline/vim-airline&amp;#39;
Plug &amp;#39;vim-airline/vim-airline-themes&amp;#39;

Plug &amp;#39;Shougo/denite.nvim&amp;#39;
Plug &amp;#39;Shougo/unite.vim&amp;#39;
Plug &amp;#39;Shougo/vimfiler&amp;#39;


Plug &amp;#39;Shougo/deoplete.nvim&amp;#39;, { &amp;#39;do&amp;#39;: &amp;#39;:UpdateRemotePlugins&amp;#39; }

Plug &amp;#39;Shougo/neoinclude.vim&amp;#39;

Plug &amp;#39;majutsushi/tagbar&amp;#39;
&amp;#34;&amp;#34;Plug &amp;#39;https://github.com/fholgado/minibufexpl.vim.git&amp;#39;
Plug &amp;#39;ap/vim-buftabline&amp;#39;


Plug &amp;#39;justmao945/vim-clang&amp;#39;
&amp;#34;Plug &amp;#39;Valloric/YouCompleteMe&amp;#39;     &amp;#34; YCM补全

&amp;#34;Plug &amp;#39;SirVer/ultisnips&amp;#39;           &amp;#34; 代码片段补全  模板补全

&amp;#34;Plug &amp;#39;zchee/deoplete-jedi&amp;#39;       &amp;#34; Python补全

Plug &amp;#39;Raimondi/delimitMate&amp;#39;       &amp;#34; 不全, \&amp;#34; \( 等.

Plug &amp;#39;scrooloose/nerdcommenter&amp;#39;   &amp;#34; 自动注释   &amp;lt;leader&amp;gt;cc  注释当先选中文本  &amp;lt;leader&amp;gt;cu 取消选中文本块的注释

Plug &amp;#39;lvht/tagbar-markdown&amp;#39;       &amp;#34; markdown  tagbar显示

Plug &amp;#39;~/.fzf&amp;#39;
Plug &amp;#39;junegunn/fzf.vim&amp;#39;

call plug#end()

set background=dark
colorscheme PaperColor

let g:airline_theme=&amp;#39;papercolor&amp;#39;


&amp;#34; 设置tagbar
let g:tagbar_width=30
let g:tagbar_left=1


&amp;#34; 配置fzf  和 ag
noremap &amp;lt;leader&amp;gt;sff :Files&amp;lt;CR&amp;gt;
noremap &amp;lt;leader&amp;gt;ssf :Lines&amp;lt;CR&amp;gt;
noremap &amp;lt;leader&amp;gt;sbf :BLines&amp;lt;CR&amp;gt; 
noremap &amp;lt;leader&amp;gt;ss  :Ag&amp;lt;CR&amp;gt;

noremap &amp;lt;leader&amp;gt;gls :GFiles&amp;lt;CR&amp;gt;
noremap &amp;lt;leader&amp;gt;gss :GFiles?&amp;lt;CR&amp;gt;   

noremap &amp;lt;leader&amp;gt;btag :Tags&amp;lt;CR&amp;gt;
noremap &amp;lt;leader&amp;gt;stag :BTags&amp;lt;CR&amp;gt;


&amp;#34; 配置vimbuftabline
let g:buftabline_numbers=2

noremap &amp;lt;leader&amp;gt;&amp;lt;Tab&amp;gt; :bnext&amp;lt;CR&amp;gt;

nmap &amp;lt;leader&amp;gt;1 &amp;lt;Plug&amp;gt;BufTabLine.Go(1)
nmap &amp;lt;leader&amp;gt;2 &amp;lt;Plug&amp;gt;BufTabLine.Go(2)
nmap &amp;lt;leader&amp;gt;3 &amp;lt;Plug&amp;gt;BufTabLine.Go(3)
nmap &amp;lt;leader&amp;gt;4 &amp;lt;Plug&amp;gt;BufTabLine.Go(4)
nmap &amp;lt;leader&amp;gt;5 &amp;lt;Plug&amp;gt;BufTabLine.Go(5)
nmap &amp;lt;leader&amp;gt;6 &amp;lt;Plug&amp;gt;BufTabLine.Go(6)
nmap &amp;lt;leader&amp;gt;7 &amp;lt;Plug&amp;gt;BufTabLine.Go(7)
nmap &amp;lt;leader&amp;gt;8 &amp;lt;Plug&amp;gt;BufTabLine.Go(8)
nmap &amp;lt;leader&amp;gt;9 &amp;lt;Plug&amp;gt;BufTabLine.Go(9)
nmap &amp;lt;leader&amp;gt;0 &amp;lt;Plug&amp;gt;BufTabLine.Go(10)

&amp;#34; 设置 deoplete.nvim
let g:deoplete#enable_at_startup = 1

&amp;#34;设置Tab为补全
inoremap &amp;lt;expr&amp;gt; &amp;lt;Tab&amp;gt; pumvisible() ? &amp;#34;\&amp;lt;C-n&amp;gt;&amp;#34; : &amp;#34;\&amp;lt;Tab&amp;gt;&amp;#34;                
&amp;#34;inoremap &amp;lt;expr&amp;gt; &amp;lt;S-Tab&amp;gt; pumvisible() ? &amp;#34;\&amp;lt;C-p&amp;gt;&amp;#34; : &amp;#34;\&amp;lt;S-Tab&amp;gt;&amp;#34;
&amp;#34;inoremap &amp;lt;expr&amp;gt; &amp;lt;cr&amp;gt; pumvisible() ? &amp;#34;\&amp;lt;C-y&amp;gt;&amp;#34; : &amp;#34;\&amp;lt;cr&amp;gt;&amp;#34;


&amp;#34; 设置vim-clang
let g:clang_cpp_options = &amp;#39;-std=c++11&amp;#39;
let g:clang_check_syntax_auto = 1
let g:clang_cpp_completeopt = &amp;#39;menuone,longest&amp;#39;



&amp;#34;快捷键只在常规模式下有用 nnoremap
&amp;#34;设置 F3 为打开vimfiler
&amp;#34;设置 &amp;#34; &amp;#34;fs 为保存文件
&amp;#34;function vimfilertoRight()
&amp;#34;endfunction

nnoremap &amp;lt;F2&amp;gt; :TagbarToggle &amp;lt;CR&amp;gt;
nnoremap &amp;lt;F3&amp;gt; :VimFilerExplorer -split -direction=rightbelow &amp;lt;CR&amp;gt;          
nnoremap &amp;lt;leader&amp;gt;fs :w &amp;lt;CR&amp;gt;
nnoremap &amp;lt;leader&amp;gt;fS :wall &amp;lt;CR&amp;gt;

nnoremap &amp;lt;leader&amp;gt;qq :wq &amp;lt;CR&amp;gt;
&amp;#34;vim windows窗口左右
nnoremap &amp;lt;C-h&amp;gt; &amp;lt;C-w&amp;gt;h &amp;lt;CR&amp;gt;
nnoremap &amp;lt;C-l&amp;gt; &amp;lt;C-w&amp;gt;l &amp;lt;CR&amp;gt;
nnoremap &amp;lt;C-j&amp;gt; &amp;lt;C-w&amp;gt;j &amp;lt;CR&amp;gt;
nnoremap &amp;lt;C-k&amp;gt; &amp;lt;C-w&amp;gt;k &amp;lt;CR&amp;gt;

&amp;#34;分割窗口
nnoremap &amp;lt;leader&amp;gt;wj :split&amp;lt;CR&amp;gt;
nnoremap &amp;lt;leader&amp;gt;wl :vsplit&amp;lt;CR&amp;gt;


&amp;#34;set hidden &amp;#34; 避免必须保存才可以跳转buffer

&amp;#34; my settings 对vimfiler的配置
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_safe_mode_by_default = 0
let g:vimfiler_tree_leaf_icon = &amp;#39; &amp;#39;
let g:vimfiler_tree_opened_icon = &amp;#39;▾&amp;#39;
let g:vimfiler_tree_closed_icon = &amp;#39;▸&amp;#39;
let g:vimfiler_enable_auto_cd = 1
let g:vimfiler_file_icon = &amp;#39;-&amp;#39;
let g:vimfiler_marked_file_icon = &amp;#39;✓&amp;#39;
let g:vimfiler_readonly_file_icon = &amp;#39;✗&amp;#39;
let g:vimfiler_time_format = &amp;#39;%m-%d-%y %H:%M:%S&amp;#39;
let g:vimfiler_expand_jump_to_first_child = 0
let g:vimfiler_ignore_pattern = &amp;#39;\.git\|\.DS_Store\|\.pyc&amp;#39;


&amp;#34; 文件类型设置 FileType Settings
set sw=4
set ts=4
autocmd FileType markdown set tabstop=4 shiftwidth=4 expandtab ai
autocmd FileType c++ set tabstop=4 shiftwidth=4 expandtab ai
autocmd FileType c set tabstop=4 shiftwidth=4 expandtab ai

autocmd FileType python set tabstop=4 shiftwidth=4 expandtab ai
autocmd FileType ruby,javascript,html,css,xml set tabstop=2 shiftwidth=2 softtabstop=2 expandtab ai&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>Pixel1 源码编译</title>
      <link>https://l0phtg.github.io/post/pixel1-%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/</link>
      <pubDate>Tue, 02 Oct 2018 15:38:56 +0800</pubDate>
      
      <guid>https://l0phtg.github.io/post/pixel1-%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/</guid>
      
        <description>&lt;p&gt;记录自己Pixel1刷机流程.&lt;/p&gt;

&lt;p&gt;相关网站&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;Requirements
https://source.android.google.cn/setup/build/requirements.html#binaries

https://source.android.com/setup/build/running

buile numbers
https://source.android.com/setup/start/build-numbers

https://source.android.com/setup/build/downloading

驱动
https://developers.google.com/android/drivers&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;ota-image&#34;&gt;ota, image&lt;/h2&gt;

&lt;p&gt;刷机使用. 不需要编译源码, 直接刷机.&lt;/p&gt;

&lt;p&gt;下载刷机包&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;https://developers.google.com/android/images

https://developers.google.com/android/ota&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;刷入:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;$sudo ./flash_all.sh&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;源码下载&#34;&gt;源码下载&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;repo init -u https://aosp.tuna.tsinghua.edu.cn/platform/manifest -b android-6.0.1_r77
repo sync -j8&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;适用于pixel 的:
NZH54D android-7.1.2_r33
OPM4.171019.021.P1 android-8.1.0_r38&lt;/p&gt;

&lt;p&gt;repo init -u &lt;a href=&#34;https://aosp.tuna.tsinghua.edu.cn/platform/manifest&#34;&gt;https://aosp.tuna.tsinghua.edu.cn/platform/manifest&lt;/a&gt; -b android-7.1.2_r33&lt;/p&gt;

&lt;p&gt;repo init -u &lt;a href=&#34;https://aosp.tuna.tsinghua.edu.cn/platform/manifest&#34;&gt;https://aosp.tuna.tsinghua.edu.cn/platform/manifest&lt;/a&gt; -b android-8.1.0_r38&lt;/p&gt;

&lt;h2 id=&#34;编译&#34;&gt;编译&lt;/h2&gt;

&lt;p&gt;直接编译userdebug版本, 方便我们调试&lt;/p&gt;

&lt;p&gt;安装jdk&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;sudo add-apt-repository ppa:openjdk-r/ppa  
sudo apt-get update   
sudo apt-get install openjdk-7-jdk  &lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编译,&lt;code&gt;如果要刷真机的话, 需要提前下载驱动到源码目录, 并解压之后运行.sh, ACCEPT后释放出来驱动相关文件.(https://developers.google.com/android/drivers)&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;$source ./build/envsetup.sh
$lunch
编译全部源码
$make -j12 
编译某个module
$make -j12 libart_32&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输入系统&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;这里不需要sudo 
$fastboot flashall -w&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;root&#34;&gt;root&lt;/h2&gt;

&lt;p&gt;root无源码的机型.
1. 解锁boot
2. 刷入twrp
3. 装入supersu.apk
4. 重启&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/rhyttr/931f5f14f40793a45170809bec6ca62a&#34;&gt;https://gist.github.com/rhyttr/931f5f14f40793a45170809bec6ca62a&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;# Download latest Android image, &amp;#34;hammerhead&amp;#34; for Nexus 5 (GSM/LTE)
https://developers.google.com/android/nexus/images#hammerhead

# Download latest TWRP
https://dl.twrp.me/hammerhead/

# Download latest SuperSu
https://download.chainfire.eu/supersu

Enable USB debugging.
Reboot into bootloader (power off, volume down + power on or sudo adb reboot-bootloader)
# Wait for boot loader to start
# Install factory ROM:
unzip hammerhead-m4b30z-factory-625c027b.zip
cd hammerhead-m4b30z
unzip image-hammerhead-m4b30z.zip
fastboot flash bootloader bootloader-hammerhead-hhz20h.img
fastboot reboot-bootloader #or power off/start bootloader
fastboot flash radio radio-hammerhead-m8974a-2.0.50.2.30.img
fastboot flash boot boot.img
fastboot flash cache cache.img
fastboot flash system system.img
# add params -S 256M if remaining memory is not enough . eg: sudo fastboot flash -S 256M system system.img
fastboot flash recovery recovery.img
fastboot reboot

# Wait boot to finish for application upgrade.
adb push SR1-SuperSU-v2.82-SR1-20170608224931.zip /sdcard/
adb reboot-bootloader

# [Wait for bootloader to start]
adb start-server
fastboot flash recovery twrp-3.1.1-0-hammerhead.img
fastboot reboot-bootloader
# on the screen, Navigate into Recovery mode (Reboot) -&amp;gt; Install -&amp;gt; zip, select SR3-SuperSU-v2.79-SR3-20170114223742.zip -&amp;gt; Swipe to confirm Flash
# Reboot System&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;调试&#34;&gt;调试&lt;/h2&gt;

&lt;p&gt;更改system分区读写权限&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;$adb disable verity
$mount -o remount,rw /system&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;emulator测试&#34;&gt;emulator测试&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;列出创建avd&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;emulator -list-avd&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;emulator 启动avd&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;$emulator -avd PixelN&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使&lt;code&gt;system&lt;/code&gt;分区可写&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;$emulator -writable-system -avd PixelN
启动之后
$adb remount&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;n. help&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;~$ emulator -help
ndroid Emulator usage: emulator [options] [-qemu args]
 options:
   -list-avds                      list available AVDs
   -sysdir &amp;lt;dir&amp;gt;                   search for system disk images in &amp;lt;dir&amp;gt;
   -system &amp;lt;file&amp;gt;                  read initial system image from &amp;lt;file&amp;gt;
   -vendor &amp;lt;file&amp;gt;                  read initial vendor image from &amp;lt;file&amp;gt;
   -writable-system                make system &amp;amp; vendor image writable after &amp;#39;adb remount&amp;#39;
   -datadir &amp;lt;dir&amp;gt;                  write user data into &amp;lt;dir&amp;gt;
   -kernel &amp;lt;file&amp;gt;                  use specific emulated kernel
   -ramdisk &amp;lt;file&amp;gt;                 ramdisk image (default &amp;lt;system&amp;gt;/ramdisk.img
   -image &amp;lt;file&amp;gt;                   obsolete, use -system &amp;lt;file&amp;gt; instead
   -initdata &amp;lt;file&amp;gt;                same as &amp;#39;-init-data &amp;lt;file&amp;gt;&amp;#39;
   -data &amp;lt;file&amp;gt;                    data image (default &amp;lt;datadir&amp;gt;/userdata-qemu.img
   -encryption-key &amp;lt;file&amp;gt;          read initial encryption key image from &amp;lt;file&amp;gt;
   -logcat-output &amp;lt;file&amp;gt;           output file of logcat(default none)
   -partition-size &amp;lt;size&amp;gt;          system/data partition size in MBs
   -cache &amp;lt;file&amp;gt;                   cache partition image (default is temporary file)
   -cache-size &amp;lt;size&amp;gt;              cache partition size in MBs
   -no-cache                       disable the cache partition
   -nocache                        same as -no-cache
   -sdcard &amp;lt;file&amp;gt;                  SD card image (default &amp;lt;datadir&amp;gt;/sdcard.img
   -quit-after-boot &amp;lt;timeout&amp;gt;      qeuit emulator after guest boots completely, or after timeout in seconds
   -snapstorage &amp;lt;file&amp;gt;             file that contains all state snapshots (default &amp;lt;datadir&amp;gt;/snapshots.img)
   -no-snapstorage                 do not mount a snapshot storage file (this disables all snapshot functionality)
   -snapshot &amp;lt;name&amp;gt;                name of snapshot within storage file for auto-start and auto-save (default &amp;#39;default-boot&amp;#39;)
   -no-snapshot                    perform a full boot and do not auto-save, but qemu vmload and vmsave operate on snapstorage
   -no-snapshot-save               do not auto-save to snapshot on exit: abandon changed state
   -no-snapshot-load               do not auto-start from snapshot: perform a full boot
   -snapshot-list                  show a list of available snapshots
   -no-snapshot-update-time        do not try to correct snapshot time on restore
   -wipe-data                      reset the user data image (copy it from initdata)
   -avd &amp;lt;name&amp;gt;                     use a specific android virtual device
   -skindir &amp;lt;dir&amp;gt;                  search skins in &amp;lt;dir&amp;gt; (default &amp;lt;system&amp;gt;/skins)
   -skin &amp;lt;name&amp;gt;                    select a given skin
   -no-skin                        deprecated: create an AVD with no skin instead
   -noskin                         same as -no-skin
   -memory &amp;lt;size&amp;gt;                  physical RAM size in MBs
   -cores &amp;lt;number&amp;gt;                 Set number of CPU cores to emulator
   -accel &amp;lt;mode&amp;gt;                   Configure emulation acceleration
   -no-accel                       Same as &amp;#39;-accel off&amp;#39;
   -ranchu                         Use new emulator backend instead of the classic one
   -engine &amp;lt;engine&amp;gt;                Select engine. auto|classic|qemu2
   -netspeed &amp;lt;speed&amp;gt;               maximum network download/upload speeds
   -netdelay &amp;lt;delay&amp;gt;               network latency emulation
   -netfast                        disable network shaping
   -code-profile &amp;lt;name&amp;gt;            enable code profiling
   -show-kernel                    display kernel messages
   -shell                          enable root shell on current terminal
   -no-jni                         disable JNI checks in the Dalvik runtime
   -nojni                          same as -no-jni
   -logcat &amp;lt;tags&amp;gt;                  enable logcat output with given tags
   -use-system-libs                Use system libstdc++ instead of bundled one
   -bluetooth &amp;lt;vendorid:productid&amp;gt; forward bluetooth to vendorid:productid
   -no-audio                       disable audio support
   -noaudio                        same as -no-audio
   -audio &amp;lt;backend&amp;gt;                use specific audio backend
   -radio &amp;lt;device&amp;gt;                 redirect radio modem interface to character device
   -port &amp;lt;port&amp;gt;                    TCP port that will be used for the console
   -ports &amp;lt;consoleport&amp;gt;,&amp;lt;adbport&amp;gt;  TCP ports used for the console and adb bridge
   -onion &amp;lt;image&amp;gt;                  use overlay PNG image over screen
   -onion-alpha &amp;lt;%age&amp;gt;             specify onion-skin translucency
   -onion-rotation 0|1|2|3         specify onion-skin rotation
   -dpi-device &amp;lt;dpi&amp;gt;               specify device&amp;#39;s resolution in dpi (default 165)
   -scale &amp;lt;scale&amp;gt;                  scale emulator window (deprecated)
   -http-proxy &amp;lt;proxy&amp;gt;             make TCP connections through a HTTP/HTTPS proxy
   -timezone &amp;lt;timezone&amp;gt;            use this timezone instead of the host&amp;#39;s default
   -dns-server &amp;lt;servers&amp;gt;           use this DNS server(s) in the emulated system
   -net-tap &amp;lt;interface&amp;gt;            use this TAP interface for networking
   -net-tap-script-up &amp;lt;script&amp;gt;     script to run when the TAP interface goes up
   -net-tap-script-down &amp;lt;script&amp;gt;   script to run when the TAP interface goes down
   -cpu-delay &amp;lt;cpudelay&amp;gt;           throttle CPU emulation
   -no-boot-anim                   disable animation for faster boot
   -no-window                      disable graphical window display
   -no-sim                         device has no SIM card
   -lowram                         device is a low ram device
   -version                        display emulator version number
   -report-console &amp;lt;socket&amp;gt;        report console port to remote socket
   -gps &amp;lt;device&amp;gt;                   redirect NMEA GPS to character device
   -shell-serial &amp;lt;device&amp;gt;          specific character device for root shell
   -tcpdump &amp;lt;file&amp;gt;                 capture network packets to file
   -bootchart &amp;lt;timeout&amp;gt;            enable bootcharting
   -charmap &amp;lt;file&amp;gt;                 use specific key character map
   -studio-params &amp;lt;file&amp;gt;           used by Android Studio to provide parameters
   -prop &amp;lt;name&amp;gt;=&amp;lt;value&amp;gt;            set system property on boot
   -shared-net-id &amp;lt;number&amp;gt;         join the shared network, using IP address 10.1.2.&amp;lt;number&amp;gt;
   -nand-limits &amp;lt;nlimits&amp;gt;          enforce NAND/Flash read/write thresholds
   -gpu &amp;lt;mode&amp;gt;                     set hardware OpenGLES emulation mode
   -camera-back &amp;lt;mode&amp;gt;             set emulation mode for a camera facing back
   -camera-front &amp;lt;mode&amp;gt;            set emulation mode for a camera facing front
   -webcam-list                    lists web cameras available for emulation
   -screen &amp;lt;mode&amp;gt;                  set emulated screen mode
   -selinux &amp;lt;disabled|permissive&amp;gt;  Set SELinux to either disabled or permissive mode
   -unix-pipe &amp;lt;path&amp;gt;               Add &amp;lt;path&amp;gt; to the list of allowed Unix pipes
   -fixed-scale                    Use fixed 1:1 scale for the initial emulator window.
   -wait-for-debugger              Pause on launch and wait for a debugger process to attach before resuming
   -skip-adb-auth                  Skip adb authentication dialogue
   -metrics-to-console             Enable usage metrics and print the messages to stdout
   -metrics-to-file &amp;lt;file&amp;gt;         Enable usage metrics and write the messages into specified file
   -feature &amp;lt;name|-name&amp;gt;           Force-enable or disable (-name) the features
   -sim-access-rules-file &amp;lt;file&amp;gt;   Use SIM access rules from specified file
   -phone-number-prefix &amp;lt;string&amp;gt;   Number to use as the emulator&amp;#39;s phone number prefix

    -qemu args...                  pass arguments to qemu
    -qemu -h                       display qemu help

    -verbose                       same as &amp;#39;-debug-init&amp;#39;
    -debug &amp;lt;tags&amp;gt;                  enable/disable debug messages
    -debug-&amp;lt;tag&amp;gt;                   enable specific debug messages
    -debug-no-&amp;lt;tag&amp;gt;                disable specific debug messages

    -help                          print this help
    -help-&amp;lt;option&amp;gt;                 print option-specific help

    -help-disk-images              about disk images
    -help-debug-tags               debug tags for -debug &amp;lt;tags&amp;gt;
    -help-char-devices             character &amp;lt;device&amp;gt; specification
    -help-environment              environment variables
    -help-virtual-device           virtual device management
    -help-sdk-images               about disk images when using the SDK
    -help-build-images             about disk images when building Android
    -help-all                      prints all help content&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>Hugo搭建博客</title>
      <link>https://l0phtg.github.io/post/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Wed, 19 Sep 2018 20:04:10 +0800</pubDate>
      
      <guid>https://l0phtg.github.io/post/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</guid>
      
        <description>&lt;p&gt;博客半年多没更新了. 正好最近时间比较多, 想着把博客更新下, 再把几篇平时总结的文章上传在Blog里面.&lt;/p&gt;

&lt;p&gt;以前使用hexo搭的, 最近发现了好多人在用&lt;code&gt;hugo&lt;/code&gt;, 自己使用hugo重新搭建了一下, 简单方便, 好感指数五颗星.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34;&gt;https://gohugo.io/getting-started/quick-start/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;hugo 搭建&lt;/p&gt;

&lt;h2 id=&#34;linux平台安装hugo&#34;&gt;linux平台安装hugo&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;源码安装&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;安装go:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/doc/install?download=go1.11.linux-amd64.tar.gz&#34;&gt;https://golang.org/doc/install?download=go1.11.linux-amd64.tar.gz&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#033&#34;&gt;$tar&lt;/span&gt; -C /usr/local -xzf go1.11.linux-amd64.tar.gz
$ vim /etc/profile
&lt;span style=&#34;color:#366&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#033&#34;&gt;PATH&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;$PATH&lt;/span&gt;:/usr/local/go/bin&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下载源码安装hugo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mkdir &lt;span style=&#34;color:#033&#34;&gt;$HOME&lt;/span&gt;/src
&lt;span style=&#34;color:#366&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color:#033&#34;&gt;$HOME&lt;/span&gt;/src
git clone https://github.com/gohugoio/hugo.git
&lt;span style=&#34;color:#366&#34;&gt;cd&lt;/span&gt; hugo
go install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;apt安装&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#033&#34;&gt;$sudo&lt;/span&gt; apt install hugo&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;

&lt;h3 id=&#34;创建new-site&#34;&gt;创建New site&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#033&#34;&gt;$hugo&lt;/span&gt; new site quickstart&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;创建md&#34;&gt;创建md&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#033&#34;&gt;$hugo&lt;/span&gt; new posts/my-first-post.md&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;预览&#34;&gt;预览&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#033&#34;&gt;$hugo&lt;/span&gt; server -D &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Navigate to your new site at &lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;个性化主题&#34;&gt;个性化主题&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;https://themes.gohugo.io/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;网站配置&#34;&gt;网站配置&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;config.toml&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#033&#34;&gt;baseURL&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;https://example.org/&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#033&#34;&gt;languageCode&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;en-us&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#033&#34;&gt;title&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;My New Hugo Site&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#033&#34;&gt;theme&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;ananke&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;post到github-pages上&#34;&gt;post到github pages上&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;升级git&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Debian/Ubuntu
For the latest stable version &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; your release of Debian/Ubuntu

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# apt-get install git
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;For Ubuntu, this PPA provides the latest stable upstream Git version
# add-apt-repository ppa:git-core/ppa # apt update; apt install git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;github上创建USER_NAME.github.io的repo.&lt;/li&gt;
&lt;li&gt;clone repo到public目录&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git submodule add -b master git@github.com:&amp;lt;USERNAME&amp;gt;/&amp;lt;USERNAME&amp;gt;.github.io.git public&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;push&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;depl4oy.sh&lt;/code&gt;如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#099&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#366&#34;&gt;echo&lt;/span&gt; -e &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;\033[0;32mDeploying updates to GitHub...\033[0m&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Build the project.
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;hugo &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# if using a theme, replace with `hugo -t &amp;lt;YOURTHEME&amp;gt;`
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Go To Public folder
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;cd&lt;/span&gt; public
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Add changes to git.
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;git add .

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Commit changes.
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;msg&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;rebuilding site `date`&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#033&#34;&gt;$#&lt;/span&gt; -eq &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;then&lt;/span&gt; &lt;span style=&#34;color:#033&#34;&gt;msg&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;$1&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;fi&lt;/span&gt;
git commit -m &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;$msg&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Push source and build repos.
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;git push origin master

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Come Back up to the Project Root
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;cd&lt;/span&gt; ..&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;内容编写&#34;&gt;内容编写&lt;/h2&gt;

&lt;h3 id=&#34;插入图片&#34;&gt;插入图片&lt;/h3&gt;

&lt;p&gt;图片放在static目录下&lt;/p&gt;

&lt;p&gt;例如&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;目录下的文件:
- static
   - deepin
      - desktop.png
      - splitScreen.png
      - vimMarkdownPreview.png&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用的时候:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;![](/deepin/desktop.png)&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;文章摘要&#34;&gt;文章摘要&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;!--more--&amp;gt;&lt;/code&gt;前面的会成为文章的摘要, 在首页显示.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;---
title : &amp;#34;hihi&amp;#34;
tags :  &amp;#34;blog&amp;#34;
---

&amp;lt;!--more--&amp;gt;

正文&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;显示toc&#34;&gt;显示toc&lt;/h3&gt;

&lt;p&gt;toc : true&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;---
title: &amp;#34;Iqiyi开源hook框架XHook分析&amp;#34;
date: 2018-09-19T02:19:05+08:00
lastmod: 2018-09-19T02:19:05+08:00
draft: false
keywords: []
description: &amp;#34;&amp;#34;
tags: [&amp;#34;hook&amp;#34;]
categories: [&amp;#34;hook&amp;#34;]
author: &amp;#34;&amp;#34;

# You can also close(false) or open(true) something for this content.
# P.S. comment can only be closed
comment: false
toc: true
autoCollapseToc: false
# You can also define another contentCopyright. e.g. contentCopyright: &amp;#34;This is another copyright.&amp;#34;
contentCopyright: false
reward: false
mathjax: false
---&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;语法高亮&#34;&gt;语法高亮&lt;/h3&gt;

&lt;p&gt;hugo &lt;strong&gt;使用chroma默认进行语法高亮&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#033&#34;&gt;pygmentsCodefences&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#高亮markdown的代码块
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;pygmentsCodefencesGuessSyntax&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#高亮markdown中没有标注语言的代码块
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;pygmentsStyle&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;manni&amp;#39;&lt;/span&gt; #高亮主题&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>Iqiyi开源hook框架XHook分析</title>
      <link>https://l0phtg.github.io/post/iqiyi%E5%BC%80%E6%BA%90hook%E6%A1%86%E6%9E%B6xhook%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 19 Aug 2018 02:19:05 +0800</pubDate>
      
      <guid>https://l0phtg.github.io/post/iqiyi%E5%BC%80%E6%BA%90hook%E6%A1%86%E6%9E%B6xhook%E5%88%86%E6%9E%90/</guid>
      
        <description>&lt;p&gt;Got Hook 可以使用dlsym得到目标函数的地址, 然后遍历got表进行Hook.&lt;/p&gt;

&lt;p&gt;但是有时候我们不能通过dlsym得到函数地址. 这时我们需要怎么办呢? iqiyi的xhook很好的解决了这个问题, (可以参考linker的实现, &lt;strong&gt;有问题, 看源码&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;通过找到目标函数地址存放在got表中位置, 只要找到了目标symbol在got表中的offset, 想要修改或者得到目标函数的实际地址就轻松多了.&lt;/p&gt;

&lt;p&gt;symbol -&amp;gt; symid -&amp;gt; 在got表中的offset  -&amp;gt; 目标函数实际地址&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;阅读readme&#34;&gt;阅读Readme&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/iqiyi/xHook/blob/master/README.zh-CN.md&#34;&gt;https://github.com/iqiyi/xHook/blob/master/README.zh-CN.md&lt;/a&gt;
&lt;a href=&#34;https://github.com/iqiyi/xHook/blob/master/docs/overview/android_plt_hook_overview.zh-CN.md&#34;&gt;https://github.com/iqiyi/xHook/blob/master/docs/overview/android_plt_hook_overview.zh-CN.md&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//监测内存泄露
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;xhook_register(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.*&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;.so$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;malloc&amp;#34;&lt;/span&gt;,  my_malloc,  &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;);
xhook_register(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.*&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;.so$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;calloc&amp;#34;&lt;/span&gt;,  my_calloc,  &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;);
xhook_register(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.*&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;.so$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;realloc&amp;#34;&lt;/span&gt;, my_realloc, &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;);
xhook_register(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.*&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;.so$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;free&amp;#34;&lt;/span&gt;,    my_free,    &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;);

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//监控 sockets 生命周期
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;xhook_register(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.*&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;.so$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;getaddrinfo&amp;#34;&lt;/span&gt;, my_getaddrinfo, &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;);
xhook_register(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.*&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;.so$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;socket&amp;#34;&lt;/span&gt;,      my_socket,      &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;);
xhook_register(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.*&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;.so$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;setsockopt&amp;#34;&lt;/span&gt;   my_setsockopt,  &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;);
xhook_register(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.*&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;.so$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;bind&amp;#34;&lt;/span&gt;,        my_bind,        &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;);
xhook_register(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.*&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;.so$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;listen&amp;#34;&lt;/span&gt;,      my_listen,      &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;);
xhook_register(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.*&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;.so$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;connect&amp;#34;&lt;/span&gt;,     my_connect,     &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;);
xhook_register(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.*&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;.so$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;shutdown&amp;#34;&lt;/span&gt;,    my_shutdown,    &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;);
xhook_register(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.*&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;.so$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;close&amp;#34;&lt;/span&gt;,       my_close,       &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;);

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//过滤出和保存部分安卓 log 到本地文件
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;xhook_register(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.*&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;.so$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__android_log_write&amp;#34;&lt;/span&gt;,  my_log_write,  &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;);
xhook_register(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.*&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;.so$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__android_log_print&amp;#34;&lt;/span&gt;,  my_log_print,  &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;);
xhook_register(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.*&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;.so$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__android_log_vprint&amp;#34;&lt;/span&gt;, my_log_vprint, &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;);
xhook_register(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.*&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;.so$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__android_log_assert&amp;#34;&lt;/span&gt;, my_log_assert, &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;);

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//追踪某些调用 (忽略 linker 和 linker64)
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;xhook_register(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;^/system/.*$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;mmap&amp;#34;&lt;/span&gt;,   my_mmap,   &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;);
xhook_register(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;^/vendor/.*$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;munmap&amp;#34;&lt;/span&gt;, my_munmap, &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;);
xhook_ignore  (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.*/linker$&amp;#34;&lt;/span&gt;,   &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;mmap&amp;#34;&lt;/span&gt;);
xhook_ignore  (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.*/linker$&amp;#34;&lt;/span&gt;,   &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;munmap&amp;#34;&lt;/span&gt;);
xhook_ignore  (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.*/linker64$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;mmap&amp;#34;&lt;/span&gt;);
xhook_ignore  (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.*/linker64$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;munmap&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//防御某些注入攻击
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;xhook_register(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.*com&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;.hacker.*&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;.so$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;malloc&amp;#34;&lt;/span&gt;,  my_malloc_always_return_NULL, &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;);
xhook_register(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.*/libhacker&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;.so$&amp;#34;&lt;/span&gt;,     &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;connect&amp;#34;&lt;/span&gt;, my_connect_with_recorder,     &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;);

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//修复某些系统 bug
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;xhook_register(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.*some_vendor.*/libvictim&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;.so$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;bad_func&amp;#34;&lt;/span&gt;, my_nice_func, &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;);

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//忽略 libwebviewchromium.so 的所有 hook 信息
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;xhook_ignore(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.*/libwebviewchromium.so$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;);

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//现在执行 hook!
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;xhook_refresh(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;发现重点为下面几个函数:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;xhook_register&lt;/li&gt;
&lt;li&gt;xhook_ignore&lt;/li&gt;
&lt;li&gt;xhook_refresh&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;接下来依次分析&lt;/p&gt;

&lt;h1 id=&#34;分析&#34;&gt;分析&lt;/h1&gt;

&lt;h2 id=&#34;xhook-register-hook函数注册&#34;&gt;xhook_register Hook函数注册&lt;/h2&gt;

&lt;h3 id=&#34;函数申明&#34;&gt;函数申明&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;xhook_register&lt;/span&gt;(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;pathname_regex_str, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;symbol,
                   &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;new_func, &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;old_func) XHOOK_EXPORT;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;函数实现分析&#34;&gt;函数实现分析&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;xhook_register&lt;/span&gt;(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;pathname_regex_str, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;symbol,
                   &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;new_func, &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;old_func)
{
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; xh_core_register(pathname_regex_str, symbol, new_func, old_func);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;xh-core-register&#34;&gt;xh_core_register&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;xh_core_register&lt;/span&gt;(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;pathname_regex_str, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;symbol,
                     &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;new_func, &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;old_func)
{
    xh_core_hook_info_t &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;hi;
    regex_t              regex;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; pathname_regex_str &lt;span style=&#34;color:#555&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; symbol &lt;span style=&#34;color:#555&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; new_func) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; XH_ERRNO_INVAL;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(xh_core_inited)
    {
        XH_LOG_ERROR(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;do not register hook after refresh(): %s, %s&amp;#34;&lt;/span&gt;, pathname_regex_str, symbol);
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; XH_ERRNO_INVAL;
    }

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; regcomp(&lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt;regex, pathname_regex_str, REG_NOSUB)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; XH_ERRNO_INVAL;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (hi &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; malloc(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(xh_core_hook_info_t)))) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; XH_ERRNO_NOMEM;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (hi&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;symbol &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; strdup(symbol)))
    {
        free(hi);
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; XH_ERRNO_NOMEM;
    }
&lt;span style=&#34;color:#099&#34;&gt;#if XH_CORE_DEBUG
&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (hi&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;pathname_regex_str &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; strdup(pathname_regex_str)))
    {
        free(hi&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;symbol);
        free(hi);
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; XH_ERRNO_NOMEM;
    }
&lt;span style=&#34;color:#099&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;&lt;/span&gt;    hi&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;pathname_regex &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; regex;
    hi&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;new_func &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; new_func;
    hi&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;old_func &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; old_func;
    
    pthread_mutex_lock(&lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt;xh_core_mutex);
    TAILQ_INSERT_TAIL(&lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt;xh_core_hook_info, hi, link); &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 核心
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    pthread_mutex_unlock(&lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt;xh_core_mutex);

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;xh-elf-init&#34;&gt;xh_elf_init:&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;设置 load_bias, elf_header, Program header地址.&lt;/li&gt;
&lt;li&gt;找到第一个PT_LOAD段&lt;/li&gt;
&lt;li&gt;找到dynamic_header. 之后解析dynamic segment, 找到strtab, symtab, rel.plt, .rel,等&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;xh_elf_init&lt;/span&gt;(xh_elf_t &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;self, uintptr_t base_addr, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;pathname)
{
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; base_addr &lt;span style=&#34;color:#555&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; pathname) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; XH_ERRNO_INVAL;

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//always reset
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    memset(self, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(xh_elf_t));
    
    self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;pathname &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; pathname;
    self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;base_addr &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (ElfW(Addr))base_addr;
    self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;ehdr &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (ElfW(Ehdr) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;)base_addr;
    self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;phdr &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (ElfW(Phdr) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;)(base_addr &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;ehdr&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;e_phoff); &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//segmentation fault sometimes
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//find the first load-segment with offset 0
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    ElfW(Phdr) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;phdr0 &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; xh_elf_get_first_segment_by_type_offset(self, PT_LOAD, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;);
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; phdr0)
    {
        XH_LOG_ERROR(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Can NOT found the first load segment. %s&amp;#34;&lt;/span&gt;, pathname);
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; XH_ERRNO_FORMAT;
    }

&lt;span style=&#34;color:#099&#34;&gt;#if XH_ELF_DEBUG
&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; phdr0&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;p_vaddr)
        XH_LOG_DEBUG(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;first load-segment vaddr NOT 0 (vaddr: %p). %s&amp;#34;&lt;/span&gt;,
                     (&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;)(phdr0&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;p_vaddr), pathname);
&lt;span style=&#34;color:#099&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//save load bias addr
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;base_addr &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; phdr0&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;p_vaddr) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; XH_ERRNO_FORMAT;
    self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;bias_addr &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;base_addr &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; phdr0&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;p_vaddr;
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//find dynamic-segment
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    ElfW(Phdr) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;dhdr &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; xh_elf_get_first_segment_by_type(self, PT_DYNAMIC);
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; dhdr)
    {
        XH_LOG_ERROR(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Can NOT found dynamic segment. %s&amp;#34;&lt;/span&gt;, pathname);
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; XH_ERRNO_FORMAT;
    }

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//parse dynamic-segment
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;dyn          &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (ElfW(Dyn) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;)(self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;bias_addr &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; dhdr&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;p_vaddr);
    self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;dyn_sz       &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; dhdr&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;p_memsz;
    ElfW(Dyn) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;dyn     &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;dyn;
    ElfW(Dyn) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;dyn_end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;dyn &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; (self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;dyn_sz &lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(ElfW(Dyn)));
    uint32_t  &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;raw;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt;(; dyn &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; dyn_end; dyn&lt;span style=&#34;color:#555&#34;&gt;++&lt;/span&gt;)
    {
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;switch&lt;/span&gt;(dyn&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;d_tag) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//segmentation fault sometimes
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        {
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#99f&#34;&gt;DT_NULL&lt;/span&gt;:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//the end of the dynamic-section
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;            dyn &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; dyn_end;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#99f&#34;&gt;DT_STRTAB&lt;/span&gt;:
            {
                self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;strtab &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;)(self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;bias_addr &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; dyn&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;d_un.d_ptr);
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;((ElfW(Addr))(self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;strtab) &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;base_addr) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; XH_ERRNO_FORMAT;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            }
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#99f&#34;&gt;DT_SYMTAB&lt;/span&gt;:
            {
                self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;symtab &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (ElfW(Sym) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;)(self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;bias_addr &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; dyn&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;d_un.d_ptr);
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;((ElfW(Addr))(self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;symtab) &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;base_addr) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; XH_ERRNO_FORMAT;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            }
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#99f&#34;&gt;DT_PLTREL&lt;/span&gt;:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//use rel or rela?
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;            self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;is_use_rela &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (dyn&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;d_un.d_val &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; DT_RELA &lt;span style=&#34;color:#555&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;);
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#99f&#34;&gt;DT_JMPREL&lt;/span&gt;:
            {
                self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;relplt &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (ElfW(Addr))(self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;bias_addr &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; dyn&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;d_un.d_ptr);
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;((ElfW(Addr))(self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;relplt) &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;base_addr) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; XH_ERRNO_FORMAT;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            }
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#99f&#34;&gt;DT_PLTRELSZ&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;relplt_sz &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; dyn&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;d_un.d_val;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#99f&#34;&gt;DT_REL&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#99f&#34;&gt;DT_RELA&lt;/span&gt;:
            {
                self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;reldyn &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (ElfW(Addr))(self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;bias_addr &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; dyn&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;d_un.d_ptr);
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;((ElfW(Addr))(self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;reldyn) &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;base_addr) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; XH_ERRNO_FORMAT;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            }
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#99f&#34;&gt;DT_RELSZ&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#99f&#34;&gt;DT_RELASZ&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;reldyn_sz &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; dyn&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;d_un.d_val;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#99f&#34;&gt;DT_ANDROID_REL&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#99f&#34;&gt;DT_ANDROID_RELA&lt;/span&gt;:
            {
                self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;relandroid &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (ElfW(Addr))(self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;bias_addr &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; dyn&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;d_un.d_ptr);
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;((ElfW(Addr))(self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;relandroid) &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;base_addr) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; XH_ERRNO_FORMAT;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            }
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#99f&#34;&gt;DT_ANDROID_RELSZ&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#99f&#34;&gt;DT_ANDROID_RELASZ&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;relandroid_sz &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; dyn&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;d_un.d_val;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#99f&#34;&gt;DT_HASH&lt;/span&gt;:
            {
                raw &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (uint32_t &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;)(self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;bias_addr &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; dyn&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;d_un.d_ptr);
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;((ElfW(Addr))raw &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;base_addr) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; XH_ERRNO_FORMAT;
                self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;bucket_cnt  &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; raw[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;];
                self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;chain_cnt   &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; raw[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;];
                self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;bucket      &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt;raw[&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;];
                self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;chain       &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;bucket[self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;bucket_cnt]);
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            }
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#99f&#34;&gt;DT_GNU_HASH&lt;/span&gt;:
            {
                raw &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (uint32_t &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;)(self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;bias_addr &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; dyn&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;d_un.d_ptr);
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;((ElfW(Addr))raw &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;base_addr) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; XH_ERRNO_FORMAT;
                self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;bucket_cnt  &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; raw[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;];
                self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;symoffset   &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; raw[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;];
                self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;bloom_sz    &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; raw[&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;];
                self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;bloom_shift &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; raw[&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;];
                self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;bloom       &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (ElfW(Addr) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt;raw[&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;]);
                self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;bucket      &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (uint32_t &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;bloom[self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;bloom_sz]));
                self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;chain       &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (uint32_t &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;bucket[self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;bucket_cnt]));
                self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;is_use_gnu_hash &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            }
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        }
    }

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//check android rel/rela
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;relandroid)
    {
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;rel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;)self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;relandroid;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;relandroid_sz &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;||&lt;/span&gt;
           rel[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;||&lt;/span&gt;
           rel[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;P&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;||&lt;/span&gt;
           rel[&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;||&lt;/span&gt;
           rel[&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;)
        {
            XH_LOG_ERROR(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;android rel/rela format error&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;);
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; XH_ERRNO_FORMAT;
        }
        
        self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;relandroid &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;;
        self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;relandroid_sz &lt;span style=&#34;color:#555&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//check elf info
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; xh_elf_check(self))
    {
        XH_LOG_ERROR(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;elf init check failed. %s&amp;#34;&lt;/span&gt;, pathname);
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; XH_ERRNO_FORMAT;
    }
    
&lt;span style=&#34;color:#099&#34;&gt;#if XH_ELF_DEBUG
&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;&lt;/span&gt;    xh_elf_dump(self);
&lt;span style=&#34;color:#099&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;&lt;/span&gt;
    XH_LOG_INFO(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;init OK: %s (%s %s PLT:%u DYN:%u ANDROID:%u)&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;, self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;pathname,
                self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;is_use_rela &lt;span style=&#34;color:#555&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;RELA&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;REL&amp;#34;&lt;/span&gt;,
                self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;is_use_gnu_hash &lt;span style=&#34;color:#555&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;GNU_HASH&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;ELF_HASH&amp;#34;&lt;/span&gt;,
                self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;relplt_sz, self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;reldyn_sz, self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;relandroid_sz);

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;xh-refresh&#34;&gt;xh_refresh&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;xh_refresh &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; xh_core_refresh &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; xh_core_init_once

                              &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; xh_core_refresh_impl 
   

xh_core_refresh_impl &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; xh_core_check_elf_header
                     &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; xh_core_hook             &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; xh_core_hook_impl
                     
                     
xh_core_hook_impl    &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; xh_elf_init
                     &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; xh_elf_hook&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;xh-elf-hook&#34;&gt;xh_elf_hook&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;xh_elf_find_symidx_by_name    //find symbol index by symbol name&lt;/li&gt;
&lt;li&gt;replace.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//find symbol index by symbol name
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; (r &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; xh_elf_find_symidx_by_name(self, symbol, &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt;symidx))) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;;
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//replace for .rel(a).plt
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;relplt)
    {
        xh_elf_plain_reloc_iterator_init(&lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt;plain_iter, self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;relplt, self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;relplt_sz, self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;is_use_rela);
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; (rel_common &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; xh_elf_plain_reloc_iterator_next(&lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt;plain_iter)))
        {
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; (r &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; xh_elf_find_and_replace_func(self,
                                                      (self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;is_use_rela &lt;span style=&#34;color:#555&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.rela.plt&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.rel.plt&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,
                                                      symbol, new_func, old_func,
                                                      symidx, rel_common, &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt;found))) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; r;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(found) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        }
    }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;xh-elf-find-symidx-by-name&#34;&gt;xh_elf_find_symidx_by_name&lt;/h4&gt;

&lt;p&gt;其中: 寻找symidx, 遍历symtab,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;xh_elf_find_symidx_by_name&lt;/span&gt;(xh_elf_t &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;self, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;symbol, uint32_t &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;symidx)
{
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;is_use_gnu_hash)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; xh_elf_gnu_hash_lookup(self, symbol, symidx);
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; xh_elf_hash_lookup(self, symbol, symidx);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;xh-elf-find-and-replace-func&#34;&gt;xh_elf_find_and_replace_func&lt;/h4&gt;

&lt;p&gt;rel, rela表中存放这r_offset, 和symidx.&lt;/p&gt;

&lt;p&gt;真正替换的流程在&lt;strong&gt;xh_elf_find_and_replace_func&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;xh_elf_find_and_replace_func&lt;/span&gt;(xh_elf_t &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;self, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;section,
                                        &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; is_plt, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;symbol,
                                        &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;new_func, &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;old_func,
                                        uint32_t symidx, &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;rel_common,
                                        &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;found)
{
    ElfW(Rela)    &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;rela;
    ElfW(Rel)     &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;rel;
    ElfW(Addr)     r_offset;
    size_t         r_info;
    size_t         r_sym;
    size_t         r_type;
    ElfW(Addr)     addr;
    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt;            r;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; found) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;found &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;;
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;is_use_rela)
    {
        rela &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (ElfW(Rela) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;)rel_common;
        r_info &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rela&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;r_info;
        r_offset &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rela&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;r_offset;
    }
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;
    {
        rel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (ElfW(Rel) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;)rel_common;
        r_info &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rel&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;r_info;
        r_offset &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rel&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;r_offset;
    }

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//check sym
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    r_sym &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; XH_ELF_R_SYM(r_info);
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(r_sym &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; symidx) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;;

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//check type
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    r_type &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; XH_ELF_R_TYPE(r_info);
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(is_plt &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; r_type &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; XH_ELF_R_GENERIC_JUMP_SLOT) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;!&lt;/span&gt;is_plt &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (r_type &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; XH_ELF_R_GENERIC_GLOB_DAT &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; r_type &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; XH_ELF_R_GENERIC_ABS)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;;

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//we found it
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    XH_LOG_INFO(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;found %s at %s offset: %p&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;, symbol, section, (&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;)r_offset);
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; found) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;found &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//do replace
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    addr &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;bias_addr &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; r_offset;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(addr &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;base_addr) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; XH_ERRNO_FORMAT;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; (r &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; xh_elf_replace_function(self, symbol, addr, new_func, old_func)))
    {
        XH_LOG_ERROR(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;replace function failed: %s at %s&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;, symbol, section);
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; r;
    }

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>InlineHook学习分析</title>
      <link>https://l0phtg.github.io/post/inlinehook%E5%AD%A6%E4%B9%A0%E5%88%86%E6%9E%90/</link>
      <pubDate>Thu, 05 Apr 2018 02:14:31 +0800</pubDate>
      
      <guid>https://l0phtg.github.io/post/inlinehook%E5%AD%A6%E4%B9%A0%E5%88%86%E6%9E%90/</guid>
      
        <description>&lt;p&gt;分析开源的inlineHook代码, 总结inlineHook的原理与实现.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;本文首发于&lt;strong&gt;看雪论坛&lt;/strong&gt;, 转载请注明出处.&lt;/p&gt;

&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;p&gt;最近在面试某大厂的安全岗位时，面试官问到了一些有关hook的知识, 在简单分析了下F8大牛的开源代码之后, 有了这篇文章.&lt;/p&gt;

&lt;h2 id=&#34;参考文章和项目代码&#34;&gt;参考文章和项目代码&lt;/h2&gt;

&lt;p&gt;文章:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;http://ele7enxxh.com/Android-Arm-Inline-Hook.html
http://gslab.qq.com/portal.php?mod=view&amp;amp;aid=168&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;项目:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;https://github.com/ele7enxxh/Android-Inline-Hook
https://github.com/F8LEFT/FAInHook&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;使用方法&#34;&gt;使用方法&lt;/h2&gt;

&lt;p&gt;MainActivity:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;loadLibrary&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;FHook&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
    
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;native&lt;/span&gt; String &lt;span style=&#34;color:#c0f&#34;&gt;stringFromJNI&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们会将会测试Hook 这个&amp;rdquo;stringFromJNI()&amp;ldquo;函数.&lt;/p&gt;

&lt;h2 id=&#34;分析&#34;&gt;分析&lt;/h2&gt;

&lt;h4 id=&#34;使用&#34;&gt;使用&lt;/h4&gt;

&lt;p&gt;在native层, 我们的main.cpp中&lt;/p&gt;

&lt;p&gt;会在JNI_OnLoad中有一个init函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;jstring &lt;span style=&#34;color:#c0f&#34;&gt;stringFromJNI&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;
        JNIEnv &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;env&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt;
        jobject &lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
     doInHook&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// doGotHook();
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; env&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;NewStringUTF&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;getStr&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;

JNIEXPORT jint JNICALL &lt;span style=&#34;color:#c0f&#34;&gt;JNI_OnLoad&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;JavaVM&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; vm&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;reserved&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    JNIEnv&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; env &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; nullptr&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
    jint resultstr &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;1&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;vm&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;GetEnv&lt;span style=&#34;color:#555&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;**)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt;env&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; JNI_VERSION_1_6&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; JNI_OK&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;1&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;

    auto jclazz &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; env&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;FindClass&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;com/example/l0phtg/hookstudyf8/MainActivity&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
    JNINativeMethod natives&lt;span style=&#34;color:#555&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;stringFromJNI&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;()Ljava/lang/String;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*)&lt;/span&gt;stringFromJNI&lt;span style=&#34;color:#555&#34;&gt;}};&lt;/span&gt;
    env&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;RegisterNatives&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;jclazz&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; natives&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; 1&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
    env&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;DeleteLocalRef&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;jclazz&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;

    init&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; JNI_VERSION_1_6&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在Hook.cpp我们来看一下init函数:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;init&lt;/span&gt;() {
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;auto&lt;/span&gt; hook &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; FAInHook&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;instance();
    hook&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;registerHook((Elf_Addr)getStr,
                       (Elf_Addr)inlCallback,
                       (Elf_Addr&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt;inlCallbackSrc);
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;auto&lt;/span&gt; lib &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; dlopen(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;libFHook.so&amp;#34;&lt;/span&gt;, RTLD_NOW);
    gotCallbackSrc &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;)())dlsym(lib, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;_Z6getStrv&amp;#34;&lt;/span&gt;);
    dlclose(lib);

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;false&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到, 我们实例化了一个FAInHook对象, &lt;code&gt;new FAInHook()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;并调用了&lt;code&gt;registerHook&lt;/code&gt;函数来注册对getStr的hook.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;FAInHook &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;FAInHook&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;instance() {
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; FAInHook&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; mIns &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(mIns &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;) {
        mIns &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; FAInHook();
    }
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; mIns;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们在使用是还会用到的&lt;code&gt;doInHook&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;bool doInHook() {
    static bool isHooked = false;
    if (isHooked) {
        isHooked = false;
        FAInHook::instance()-&amp;gt;unhookAll();
    } else {
        isHooked = true;
        FAInHook::instance()-&amp;gt;hookAll();
    }
    return true;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;现在可以看到, 我们主要的任务就是分析&lt;code&gt;registerHook&lt;/code&gt;和&lt;code&gt;doInHook&lt;/code&gt;这两个函数的实现.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;registerhook函数&#34;&gt;registerHook函数&lt;/h4&gt;

&lt;p&gt;我们现在主要分析&lt;code&gt;registerHook&lt;/code&gt;函数.&lt;/p&gt;

&lt;p&gt;先来分析参数:
在Hook之前我们首先要注册这个函数&lt;/p&gt;

&lt;p&gt;函数申明:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;    HOOK_STATUS registerHook(Elf_Addr orginalFunAddr, Elf_Addr newFunAddr,
                             Elf_Addr* callOrigin);&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数(原始函数地址, 新函数地址, 调用原始函数).&lt;/p&gt;

&lt;p&gt;函数主要流程:
1. 注册函数信息, 计算hook stub.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;首先判断`originFunAddr`和`newFunAddr`是否是函数地址.

auto info = getHookInfo(originFunAddr); 得到函数信息

然后判断函数是否已经被Hook. &lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;检查判断指令类型(thumb or arm or x86 &amp;hellip;)&lt;/li&gt;
&lt;li&gt;createStub(info)     创建stub, 就是thumb下创建ldr.w pc, [pc],   addr 来执行跳转到newFuncAddr功能&lt;/li&gt;
&lt;li&gt;createCallOriginalStub(info) 创建originalFunAddr的stub, 主要会涉及一些对pc相关指令的处理.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//  register hook
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;FAInHook&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;HOOK_STATUS FAInHook&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;registerHook(
        Elf_Addr orginalFunAddr, Elf_Addr newFunAddr, Elf_Addr &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;callOrigin) {
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// register hook information, calc hook stub at the same time.
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;!&lt;/span&gt;FAHook&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;MemHelper&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;isFunctionAddr((&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;) orginalFunAddr)
       &lt;span style=&#34;color:#555&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;!&lt;/span&gt;FAHook&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;MemHelper&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;isFunctionAddr((&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;) newFunAddr)) {
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; FERROR_NOT_EXECUTABLE;
    }

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;auto&lt;/span&gt; info &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; getHookInfo(orginalFunAddr);
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;nullptr&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; info) {
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;auto&lt;/span&gt; hookStatus &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; info&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;getHookStatus();
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(FAHook&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;HOOKED &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; hookStatus) {
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; FERROR_ALREADY_HOOKED;
        } &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(FAHook&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;REGISTERED &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; hookStatus) {
            delHookInfo(info);
        }
    }

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// check for FunctionType
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;auto&lt;/span&gt; type &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; FAHook&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;Instruction&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;getFunctionType(orginalFunAddr);
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(FAHook&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;ERRTYPE &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; type) {
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; FERROR_UNKNOWN;
    }

    info &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; FAHook&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;HookInfo((&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;) orginalFunAddr, (&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;) newFunAddr);
    info&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;setOriginalFunctionType(type);

    FAHook&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;Instruction&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; instruction &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;switch&lt;/span&gt;(type) {
&lt;span style=&#34;color:#099&#34;&gt;#if defined(__arm__)
&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;case&lt;/span&gt; FAHook&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#99f&#34;&gt;ARM&lt;/span&gt;:
            instruction &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; FAHook&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;ArmInstruction();
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;case&lt;/span&gt; FAHook&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#99f&#34;&gt;THUMB&lt;/span&gt;:
            instruction &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; FAHook&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;ThumbInstruction();
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;span style=&#34;color:#099&#34;&gt;#elif defined(__aarch64__)
&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;case&lt;/span&gt; FAHook&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#99f&#34;&gt;ARM64&lt;/span&gt;:
            instruction &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; FAHook&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;Arm64Instruction();
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;span style=&#34;color:#099&#34;&gt;#elif defined(__i386__) || defined(__x86_64__)
&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;case&lt;/span&gt; FAHook&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#99f&#34;&gt;X86&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;case&lt;/span&gt; FAHook&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#99f&#34;&gt;X64&lt;/span&gt;:
            instruction &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; FAHook&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;IntelInstruction();
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;span style=&#34;color:#099&#34;&gt;#elif defined(__mips64__)
&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;case&lt;/span&gt; FAHook&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#99f&#34;&gt;MIPS64&lt;/span&gt;:
            instruction &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; FAHook&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;Mips64Instruction();
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;span style=&#34;color:#099&#34;&gt;#elif defined(__mips__)
&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;case&lt;/span&gt; FAHook&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#99f&#34;&gt;MIPS&lt;/span&gt;:
            instruction &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; FAHook&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;MipsInstruction();
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;span style=&#34;color:#099&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt;
            assert(&lt;span style=&#34;color:#366&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;not support abi&amp;#34;&lt;/span&gt;);
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; FERROR_UNKNOWN;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;!&lt;/span&gt;instruction&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;createStub(info)
       &lt;span style=&#34;color:#555&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;!&lt;/span&gt;instruction&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;createBackStub(info)
       &lt;span style=&#34;color:#555&#34;&gt;||&lt;/span&gt; (callOrigin &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;?&lt;/span&gt;
            &lt;span style=&#34;color:#555&#34;&gt;!&lt;/span&gt;instruction&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;createCallOriginalStub(info) &lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;false&lt;/span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// want a callback
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;       ) {
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;delete&lt;/span&gt; instruction;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;delete&lt;/span&gt; info;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; FERROR_MEMORY;
    }

    addHookInfo(info);
    info&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;setHookStatus(FAHook&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;REGISTERED);

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(callOrigin &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;) {
        &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;callOrigin &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (Elf_Addr) info&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;getCallOriginalIns();
    }

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;delete&lt;/span&gt; instruction;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; FERROR_SUCCESS;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;判断该地址是否是函数地址&#34;&gt;判断该地址是否是函数地址&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;打开&lt;code&gt;/proc/self/maps&lt;/code&gt;， 读取每行的信息, 用strstr根据权限做出判断.(r-x, 表示可读可执行, 即为code)()&lt;/li&gt;
&lt;li&gt;addr &amp;gt;= startAddr &amp;amp;&amp;amp; addr &amp;lt;= endAddr&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;bool FAHook::MemHelper::isFunctionAddr(void *addr) {
    char buf[MAX_BUF];
    auto fp = fopen(maps, &amp;#34;r&amp;#34;);
    if(nullptr == fp) {
        return false;
    }

    while(fgets(buf, MAX_BUF, fp)) {
        if(strstr(buf, &amp;#34;r-xp&amp;#34;) != nullptr) {
            void* startAddr = (void*)strtoul(strtok(buf, &amp;#34;-&amp;#34;), nullptr, 16);
            void* endAddr = (void*)strtoul(strtok(nullptr, &amp;#34; &amp;#34;), nullptr, 16);
            if(addr &amp;gt;= startAddr &amp;amp;&amp;amp; addr &amp;lt;= endAddr) {
                fclose(fp);
                return true;
            }
        }
    }
    fclose(fp);
    FLOGE(this functionAddr is not a function!);
    return false;
}&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;得到hook地址的信息-是否已经hook&#34;&gt;得到Hook地址的信息, 是否已经Hook.&lt;/h5&gt;

&lt;p&gt;hook_map是一个std::map&lt;Elf_Addr, FAInHook::HookInfo*&gt;的map类型. find函数会返回返回一个迭代器, 可以用&lt;code&gt;it-&amp;gt;first&lt;/code&gt;和&lt;code&gt;it-&amp;gt;second&lt;/code&gt;来访问它的成员(key和value). 这个过程其实对已经注册过的hook函数的处理.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;FAHook::HookInfo *FAInHook::getHookInfo(Elf_Addr origFunAddr) {
    auto it = hook_map.find(origFunAddr);
    if(it == hook_map.end()) {
        return nullptr;
    }
    return it-&amp;gt;second;
}&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;得到originlfunaddr的指令类型&#34;&gt;得到originlFunAddr的指令类型,&lt;/h5&gt;

&lt;p&gt;auto type = FAHook::Instruction::getFunctionType(orginalFunAddr);&lt;/p&gt;

&lt;p&gt;下面是&lt;code&gt;getFunctionAddr&lt;/code&gt;的实现, 可以看到. 判断指令类型的方式, 是通过自己定义宏来实现的. 当然, 在Arm指令中, 我们还要是否该指令为thumb指令.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; FunctionType &lt;span style=&#34;color:#c0f&#34;&gt;getFunctionType&lt;/span&gt;(Elf_Addr functionAddr) {
&lt;span style=&#34;color:#099&#34;&gt;#if defined(__arm__)
&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; functionAddr) {
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; ERRTYPE;
            } &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;((functionAddr &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;) {
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; ARM;
            } &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; {
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; THUMB;
            }
&lt;span style=&#34;color:#099&#34;&gt;#elif defined(__aarch64__)
&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; ARM64;
&lt;span style=&#34;color:#099&#34;&gt;#elif defined(__i386__)
&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; X86;
&lt;span style=&#34;color:#099&#34;&gt;#elif defined(__x86_64__)
&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; X64;
&lt;span style=&#34;color:#099&#34;&gt;#elif defined(__mips64__)  &lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* mips64el-* toolchain defines __mips__ too */&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; MIPS64;
&lt;span style=&#34;color:#099&#34;&gt;#elif defined(__mips__)
&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; MIPS;
&lt;span style=&#34;color:#099&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;&lt;/span&gt;        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;接下来-我们分析最重要的过程&#34;&gt;接下来, 我们分析最重要的过程:&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;info = new HookInfo(originFunAddr, newFunAddr);&lt;/li&gt;
&lt;li&gt;info.setOriginalFunctionType(type);   设置指令类型为(Arm或者thumb)&lt;/li&gt;
&lt;li&gt;instruction = new FAHook::ArmInstruction();        new arm或者thumb指令. 我发现无构造函数.&lt;/li&gt;
&lt;li&gt;instruction-&amp;gt;createStub(info);        创建stub.(stub为 jump stub来jump到newFuncAddr)&lt;/li&gt;
&lt;li&gt;instruction-&amp;gt;createCallOriginalStub(info)    创建原函数的call back stub.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在看&lt;code&gt;HookInfo.h&lt;/code&gt;时, 我们可以看到&lt;code&gt;FAHook&lt;/code&gt;是一个&lt;code&gt;namespace&lt;/code&gt;, 而里面主要包含了一个&lt;code&gt;HookInfo&lt;/code&gt;的类:&lt;/p&gt;

&lt;p&gt;我们先来分析它的构造函数:&lt;/p&gt;

&lt;p&gt;这里运用了c++中的构造函数初始化列表来初始化类成员.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;        HookInfo(void* originalAddr, void* hookAddr)
            : original_addr_(originalAddr), hook_addr_(hookAddr),
              original_stub_back_(nullptr), back_len_(0), call_original_ins_(nullptr),
              hook_status_(ERRSTATUS),
              original_function_type_(ERRTYPE), hook_function_type_(ERRTYPE){}
              &lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分析&lt;code&gt;createStub(info)&lt;/code&gt;
我们这里分析&lt;code&gt;FAHook::ThumbInstrution::createStub(FAHook::HookInfo *info)&lt;/code&gt;:
1. 将地址按4字节对齐.
2. 保存我们的stub指令, (方便之后path)指令为: &lt;code&gt;LDR.W PC, [PC]&lt;/code&gt;. 可参考(&lt;a href=&#34;http://ele7enxxh.com/Android-Arm-Inline-Hook.html&#34;&gt;http://ele7enxxh.com/Android-Arm-Inline-Hook.html&lt;/a&gt;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;bool FAHook::ThumbInstruction::createStub(FAHook::HookInfo *info) {
    auto stubSize = 0;
    uint8_t *stub = nullptr;

    uint32_t addr = (uint32_t)info-&amp;gt;getOriginalAddr();
    auto clearBit0 = addr &amp;amp; 0xFFFFFFFE;

    if (clearBit0 % 4 != 0) {                       // need to align 4, just patch with nop
        stub = new uint8_t[10];
        ((uint16_t*)stub)[stubSize++] = 0xBF00;     //NOP
    } else {
        stub = new uint8_t[8];
    }
    ((uint16_t*)stub)[stubSize++] = 0xF8DF;
    ((uint16_t*)stub)[stubSize++] = 0xF000; // LDR.W PC, [PC]
    ((uint16_t*)stub)[stubSize++] = (uint32_t)info-&amp;gt;getHookAddr() &amp;amp; 0xFFFF;
    ((uint16_t*)stub)[stubSize++] = (uint32_t)info-&amp;gt;getHookAddr() &amp;gt;&amp;gt; 16;

    info-&amp;gt;setJumpStubLen(stubSize * 2);
    info-&amp;gt;setJumpStubBack(stub);
    return true;
}&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;下面分析-createcalloriginalstub-hookinfo-info&#34;&gt;下面分析 &lt;code&gt;createCallOriginalStub(HookInfo *info)&lt;/code&gt;:&lt;/h5&gt;

&lt;p&gt;thumbInstruction.cpp的实现:&lt;/p&gt;

&lt;p&gt;基础知识:&lt;/p&gt;

&lt;p&gt;reinterpret_cast&lt;uint16_t*&gt;   为类型转换&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;处理ldr.w指令.&lt;/li&gt;
&lt;li&gt;调用createExecMemory(length);              // 分配buffer空间&lt;/li&gt;
&lt;li&gt;修正pc相关指令. (ldr liternal.  b.  b.  bl.  cbz. ldrw. add)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;为什么要修正pc相关指令?&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;举例分析: b &amp;lt;label&amp;gt;:
指令编码分析: [15:12] 1101 [11:8] cond [7:0] imm8
解析时: imm32 = ZeroExtend(imm8:&amp;#39;0&amp;#39;, 32); 
        BranchWritePC(PC+imm32)
可以看到, b指令的指令编码中, 存放的立即数为imm8, 而真实的跳转地址为(pc + imm32).
由于我们是要inlineHook, 所以我们的hook函数执行完成之后还有继续执行我们原来的函数,那么我们就要执行被patch掉的那些指令（我们已经将这些指令保存了下来），但由于存放这些指令的内存是我们mmap出来的,所以我们 要想能够在这里成功运行pc相关指令的话, 我们需要将pc相关的指令转换为其它pc无关的指令。&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;inlineHook原理图, 来源于gslab.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gslab.qq.com/data/attachment/portal/201605/04/165921tz43a3sm4vi2s4s4.png&#34; alt=&#34;inlineHook原理图 ---  来源于gslab&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;bool&lt;/span&gt; FAHook&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;ThumbInstruction&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;createCallOriginalStub(FAHook&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;HookInfo &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;info) {
    uint16_t &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;area(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;uint16_t &lt;span style=&#34;color:#555&#34;&gt;*&amp;gt;&lt;/span&gt;(getOriginalAddr(info)));    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 起始地址
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;

    uint16_t &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#c0f&#34;&gt;trail&lt;/span&gt;(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;uint16_t &lt;span style=&#34;color:#555&#34;&gt;*&amp;gt;&lt;/span&gt;(
                            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;uintptr_t &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;(area) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; info&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;getJumpStubLen())); &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 结束地址
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pcrel&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;ldrw(area[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 第一条指令
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        area[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0xF000&lt;/span&gt;   &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 判断第一条指令是否为 ldr pc, [pc]  
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;            ) {
        uint32_t &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;arm(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;uint32_t &lt;span style=&#34;color:#555&#34;&gt;*&amp;gt;&lt;/span&gt;(area));
        info&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;setCallOriginalIns(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;uint8_t &lt;span style=&#34;color:#555&#34;&gt;*&amp;gt;&lt;/span&gt;(arm[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]));
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;true&lt;/span&gt;;
    }

    size_t required((trail &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; area) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(uint16_t)); &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// required == 需要patch多少字节
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;
    size_t &lt;span style=&#34;color:#c0f&#34;&gt;used&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;);
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; (used &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; required)
        used &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; MSGetInstructionWidthThumb(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;uint8_t &lt;span style=&#34;color:#555&#34;&gt;*&amp;gt;&lt;/span&gt;(area) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; used);
    used &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (used &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(uint16_t) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(uint16_t) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(uint16_t);

    size_t &lt;span style=&#34;color:#c0f&#34;&gt;blank&lt;/span&gt;((used &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; required) &lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(uint16_t));

    uint16_t backup[used &lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(uint16_t)];
    memcpy(backup, area, used);


    size_t &lt;span style=&#34;color:#c0f&#34;&gt;length&lt;/span&gt;(used);
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; offset(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;); offset &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; used &lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(uint16_t); &lt;span style=&#34;color:#555&#34;&gt;++&lt;/span&gt;offset)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pcrel&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;ldr(backup[offset]))
            length &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(uint16_t);
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;if&lt;/span&gt; (T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pcrel&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;b(backup[offset]))
            length &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(uint16_t);
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;if&lt;/span&gt; (T2&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pcrel&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;b(backup &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; offset)) {
            length &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(uint16_t);
            &lt;span style=&#34;color:#555&#34;&gt;++&lt;/span&gt;offset;
        } &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;if&lt;/span&gt; (T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pcrel&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;bl(backup &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; offset)) {
            length &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(uint16_t);
            &lt;span style=&#34;color:#555&#34;&gt;++&lt;/span&gt;offset;
        } &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;if&lt;/span&gt; (T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pcrel&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;cbz(backup[offset])) {
            length &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(uint16_t);
        } &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;if&lt;/span&gt; (T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pcrel&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;ldrw(backup[offset])) {
            length &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(uint16_t);
            &lt;span style=&#34;color:#555&#34;&gt;++&lt;/span&gt;offset;
        } &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;if&lt;/span&gt; (T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pcrel&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;add(backup[offset]))
            length &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(uint16_t);
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;if&lt;/span&gt; (T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;32&lt;/span&gt;bit&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;i(backup[offset]))
            &lt;span style=&#34;color:#555&#34;&gt;++&lt;/span&gt;offset;

        &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;pad&lt;/span&gt;((length &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0x2&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;);
        length &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; (pad &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(uint16_t) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(uint32_t);

    uint16_t &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;buffer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (uint16_t &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;) MemHelper&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;createExecMemory(length);
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(buffer &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;) {
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;false&lt;/span&gt;;
    }

    size_t start(pad), end(length &lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(uint16_t));
    uint32_t &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#c0f&#34;&gt;trailer&lt;/span&gt;(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;uint32_t &lt;span style=&#34;color:#555&#34;&gt;*&amp;gt;&lt;/span&gt;(buffer &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; end));
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; offset(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;); offset &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; used &lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(uint16_t); &lt;span style=&#34;color:#555&#34;&gt;++&lt;/span&gt;offset) {
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pcrel&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;ldr(backup[offset])) {
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;union&lt;/span&gt; {
                uint16_t value;

                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
                    uint16_t &lt;span style=&#34;color:#99f&#34;&gt;immediate&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt;;
                    uint16_t &lt;span style=&#34;color:#99f&#34;&gt;rd&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;;
                    &lt;span style=&#34;color:#99f&#34;&gt;uint16_t&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;;
                };
            } bits &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {backup[offset&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]};

            buffer[start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;ldr_rd_&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pc_im_4&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;(bits.rd, T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;Label(start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, end&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;);
            buffer[start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;ldr_rd_&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;rn_im_4&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;(bits.rd, bits.rd, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;);

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// XXX: this code &amp;#34;works&amp;#34;, but is &amp;#34;wrong&amp;#34;: the mechanism is more complex than this
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#555&#34;&gt;*--&lt;/span&gt;trailer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; ((&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;uint32_t&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;(area &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; offset) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0x2&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; bits.immediate &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;;

            start &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;;
            end &lt;span style=&#34;color:#555&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;;
        } &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pcrel&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;b(backup[offset])) {
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;union&lt;/span&gt; {
                uint16_t value;

                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
                    uint16_t &lt;span style=&#34;color:#99f&#34;&gt;imm8&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt;;
                    uint16_t &lt;span style=&#34;color:#99f&#34;&gt;cond&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;;
                    uint16_t &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/*1101*/&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;;
                };
            } bits &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {backup[offset&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]};

            intptr_t &lt;span style=&#34;color:#c0f&#34;&gt;jump&lt;/span&gt;(bits.imm8 &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;);
            jump &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
            jump &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;23&lt;/span&gt;;
            jump &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;23&lt;/span&gt;;

            buffer[start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;b&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;_&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;im(bits.cond, (end&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; (start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;);

            &lt;span style=&#34;color:#555&#34;&gt;*--&lt;/span&gt;trailer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;uint32_t&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;(area &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; offset) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; jump;
            &lt;span style=&#34;color:#555&#34;&gt;*--&lt;/span&gt;trailer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; A&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;ldr_rd_&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;rn_im&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;(A&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pc, A&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pc, &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt;);
            &lt;span style=&#34;color:#555&#34;&gt;*--&lt;/span&gt;trailer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;nop &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;bx(A&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pc);

            start &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
            end &lt;span style=&#34;color:#555&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;;
        } &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (T2&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pcrel&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;b(backup &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; offset)) {
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;union&lt;/span&gt; {
                uint16_t value;

                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
                    uint16_t &lt;span style=&#34;color:#99f&#34;&gt;imm6&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;;
                    uint16_t &lt;span style=&#34;color:#99f&#34;&gt;cond&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;;
                    uint16_t &lt;span style=&#34;color:#99f&#34;&gt;s&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
                    &lt;span style=&#34;color:#99f&#34;&gt;uint16_t&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;;
                };
            } bits &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {backup[offset&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]};

            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;union&lt;/span&gt; {
                uint16_t value;

                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
                    uint16_t &lt;span style=&#34;color:#99f&#34;&gt;imm11&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;11&lt;/span&gt;;
                    uint16_t &lt;span style=&#34;color:#99f&#34;&gt;j2&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
                    uint16_t &lt;span style=&#34;color:#99f&#34;&gt;a&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
                    uint16_t &lt;span style=&#34;color:#99f&#34;&gt;j1&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
                    &lt;span style=&#34;color:#99f&#34;&gt;uint16_t&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;;
                };
            } exts &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {backup[offset&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]};

            intptr_t &lt;span style=&#34;color:#c0f&#34;&gt;jump&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;);
            jump &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; exts.imm11 &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
            jump &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; bits.imm6 &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;12&lt;/span&gt;;

            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (exts.a) {
                jump &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; bits.s &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;24&lt;/span&gt;;
                jump &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; (&lt;span style=&#34;color:#555&#34;&gt;~&lt;/span&gt;(bits.s &lt;span style=&#34;color:#555&#34;&gt;^&lt;/span&gt; exts.j1) &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0x1&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;23&lt;/span&gt;;
                jump &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; (&lt;span style=&#34;color:#555&#34;&gt;~&lt;/span&gt;(bits.s &lt;span style=&#34;color:#555&#34;&gt;^&lt;/span&gt; exts.j2) &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0x1&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;22&lt;/span&gt;;
                jump &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; bits.cond &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;18&lt;/span&gt;;
                jump &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;7&lt;/span&gt;;
                jump &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;7&lt;/span&gt;;
            } &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; {
                jump &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; bits.s &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt;;
                jump &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; exts.j2 &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;19&lt;/span&gt;;
                jump &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; exts.j1 &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;18&lt;/span&gt;;
                jump &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;11&lt;/span&gt;;
                jump &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;11&lt;/span&gt;;
            }

            buffer[start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;b&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;_&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;im(exts.a &lt;span style=&#34;color:#555&#34;&gt;?&lt;/span&gt; A&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#99f&#34;&gt;al&lt;/span&gt; : bits.cond, (end&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; (start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;);

            &lt;span style=&#34;color:#555&#34;&gt;*--&lt;/span&gt;trailer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;uint32_t&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;(area &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; offset) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; jump;
            &lt;span style=&#34;color:#555&#34;&gt;*--&lt;/span&gt;trailer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; A&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;ldr_rd_&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;rn_im&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;(A&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pc, A&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pc, &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt;);
            &lt;span style=&#34;color:#555&#34;&gt;*--&lt;/span&gt;trailer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;nop &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;bx(A&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pc);

            &lt;span style=&#34;color:#555&#34;&gt;++&lt;/span&gt;offset;
            start &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
            end &lt;span style=&#34;color:#555&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;;
        } &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pcrel&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;bl(backup &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; offset)) {
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;union&lt;/span&gt; {
                uint16_t value;

                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
                    uint16_t &lt;span style=&#34;color:#99f&#34;&gt;immediate&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;;
                    uint16_t &lt;span style=&#34;color:#99f&#34;&gt;s&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
                    &lt;span style=&#34;color:#99f&#34;&gt;uint16_t&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;;
                };
            } bits &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {backup[offset&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]};

            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;union&lt;/span&gt; {
                uint16_t value;

                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
                    uint16_t &lt;span style=&#34;color:#99f&#34;&gt;immediate&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;11&lt;/span&gt;;
                    uint16_t &lt;span style=&#34;color:#99f&#34;&gt;j2&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
                    uint16_t &lt;span style=&#34;color:#99f&#34;&gt;x&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
                    uint16_t &lt;span style=&#34;color:#99f&#34;&gt;j1&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
                    &lt;span style=&#34;color:#99f&#34;&gt;uint16_t&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;;
                };
            } exts &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {backup[offset&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]};

            int32_t &lt;span style=&#34;color:#c0f&#34;&gt;jump&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;);
            jump &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; bits.s &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;24&lt;/span&gt;;
            jump &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; (&lt;span style=&#34;color:#555&#34;&gt;~&lt;/span&gt;(bits.s &lt;span style=&#34;color:#555&#34;&gt;^&lt;/span&gt; exts.j1) &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0x1&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;23&lt;/span&gt;;
            jump &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; (&lt;span style=&#34;color:#555&#34;&gt;~&lt;/span&gt;(bits.s &lt;span style=&#34;color:#555&#34;&gt;^&lt;/span&gt; exts.j2) &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0x1&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;22&lt;/span&gt;;
            jump &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; bits.immediate &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;12&lt;/span&gt;;
            jump &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; exts.immediate &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
            jump &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; exts.x;
            jump &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;7&lt;/span&gt;;
            jump &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;7&lt;/span&gt;;

            buffer[start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;push_r(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; A&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;r7);
            buffer[start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;ldr_rd_&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pc_im_4&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;(A&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;r7, ((end&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; (start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;);
            buffer[start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;mov_rd_rm(A&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;lr, A&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;r7);
            buffer[start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pop_r(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; A&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;r7);
            buffer[start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;blx(A&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;lr);

            &lt;span style=&#34;color:#555&#34;&gt;*--&lt;/span&gt;trailer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;uint32_t&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;(area &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; offset) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; jump;

            &lt;span style=&#34;color:#555&#34;&gt;++&lt;/span&gt;offset;
            start &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;;
            end &lt;span style=&#34;color:#555&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;;
        } &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pcrel&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;cbz(backup[offset])) {
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;union&lt;/span&gt; {
                uint16_t value;

                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
                    uint16_t &lt;span style=&#34;color:#99f&#34;&gt;rn&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;;
                    uint16_t &lt;span style=&#34;color:#99f&#34;&gt;immediate&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;;
                    &lt;span style=&#34;color:#99f&#34;&gt;uint16_t&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
                    uint16_t &lt;span style=&#34;color:#99f&#34;&gt;i&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
                    &lt;span style=&#34;color:#99f&#34;&gt;uint16_t&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
                    uint16_t &lt;span style=&#34;color:#99f&#34;&gt;op&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
                    &lt;span style=&#34;color:#99f&#34;&gt;uint16_t&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;;
                };
            } bits &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {backup[offset&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]};

            intptr_t &lt;span style=&#34;color:#c0f&#34;&gt;jump&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;);
            jump &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; bits.i &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;;
            jump &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; bits.immediate &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//jump &amp;lt;&amp;lt;= 24;
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//jump &amp;gt;&amp;gt;= 24;
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;
            &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;rn&lt;/span&gt;(bits.rn);
            &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;rt&lt;/span&gt;(rn &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; A&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;r7 &lt;span style=&#34;color:#555&#34;&gt;?&lt;/span&gt; A&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#99f&#34;&gt;r6&lt;/span&gt; : A&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;r7);

            buffer[start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;push_r(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; rt);
            buffer[start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; T1&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;mrs_rd_apsr(rt);
            buffer[start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; T2&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;mrs_rd_apsr(rt);
            buffer[start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;cbz&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;_rn_&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;im(bits.op, rn, (end&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; (start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;)) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;);
            buffer[start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; T1&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;msr_apsr_nzcvqg_rn(rt);
            buffer[start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; T2&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;msr_apsr_nzcvqg_rn(rt);
            buffer[start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pop_r(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; rt);

            &lt;span style=&#34;color:#555&#34;&gt;*--&lt;/span&gt;trailer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;uint32_t&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;(area &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; offset) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; jump;
            &lt;span style=&#34;color:#555&#34;&gt;*--&lt;/span&gt;trailer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; A&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;ldr_rd_&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;rn_im&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;(A&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pc, A&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pc, &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt;);
            &lt;span style=&#34;color:#555&#34;&gt;*--&lt;/span&gt;trailer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;nop &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;bx(A&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pc);
            &lt;span style=&#34;color:#555&#34;&gt;*--&lt;/span&gt;trailer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;nop &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pop_r(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; rt);
            &lt;span style=&#34;color:#555&#34;&gt;*--&lt;/span&gt;trailer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;msr_apsr_nzcvqg_rn(rt);

&lt;span style=&#34;color:#099&#34;&gt;#if 0&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;            if ((start &amp;amp; 0x1) == 0)
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;                buffer[start++] = T$nop;
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;            buffer[start++] = T$bx(A$pc);
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;            buffer[start++] = T$nop;
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;            uint32_t *arm(reinterpret_cast&amp;lt;uint32_t *&amp;gt;(buffer + start));
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;            arm[0] = A$add(A$lr, A$pc, 1);
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;            arm[1] = A$ldr_rd_$rn_im$(A$pc, A$pc, (trailer - arm) * sizeof(uint32_t) - 8);
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;&lt;/span&gt;
            start &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;7&lt;/span&gt;;
            end &lt;span style=&#34;color:#555&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;;
        } &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pcrel&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;ldrw(backup[offset])) {
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;union&lt;/span&gt; {
                uint16_t value;

                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
                    &lt;span style=&#34;color:#99f&#34;&gt;uint16_t&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;7&lt;/span&gt;;
                    uint16_t &lt;span style=&#34;color:#99f&#34;&gt;u&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
                    &lt;span style=&#34;color:#99f&#34;&gt;uint16_t&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt;;
                };
            } bits &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {backup[offset&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]};

            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;union&lt;/span&gt; {
                uint16_t value;

                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
                    uint16_t &lt;span style=&#34;color:#99f&#34;&gt;immediate&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;12&lt;/span&gt;;
                    uint16_t &lt;span style=&#34;color:#99f&#34;&gt;rt&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;;
                };
            } exts &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {backup[offset&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]};

            buffer[start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; T1&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;ldr_rt_&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;rn_im&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;(exts.rt, A&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pc, T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;Label(start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, end&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;));
            buffer[start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; T2&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;ldr_rt_&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;rn_im&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;(exts.rt, A&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pc, T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;Label(start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, end&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;));

            buffer[start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; T1&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;ldr_rt_&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;rn_im&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;(exts.rt, exts.rt, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;);
            buffer[start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; T2&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;ldr_rt_&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;rn_im&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;(exts.rt, exts.rt, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;);

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// XXX: this code &amp;#34;works&amp;#34;, but is &amp;#34;wrong&amp;#34;: the mechanism is more complex than this
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#555&#34;&gt;*--&lt;/span&gt;trailer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; ((&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;uint32_t&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;(area &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; offset) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0x2&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; (bits.u &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;exts.&lt;span style=&#34;color:#99f&#34;&gt;immediate&lt;/span&gt; : exts.immediate);

            &lt;span style=&#34;color:#555&#34;&gt;++&lt;/span&gt;offset;
            start &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;;
            end &lt;span style=&#34;color:#555&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;;
        } &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pcrel&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;add(backup[offset])) {
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;union&lt;/span&gt; {
                uint16_t value;

                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
                    uint16_t &lt;span style=&#34;color:#99f&#34;&gt;rd&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;;
                    uint16_t &lt;span style=&#34;color:#99f&#34;&gt;rm&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;;
                    uint16_t &lt;span style=&#34;color:#99f&#34;&gt;h2&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
                    uint16_t &lt;span style=&#34;color:#99f&#34;&gt;h1&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
                    &lt;span style=&#34;color:#99f&#34;&gt;uint16_t&lt;/span&gt; : &lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt;;
                };
            } bits &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {backup[offset&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]};

            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (bits.h1) {
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;false&lt;/span&gt;;
            }

            &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; rt(bits.rd &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; A&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;r7 &lt;span style=&#34;color:#555&#34;&gt;?&lt;/span&gt; A&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#99f&#34;&gt;r6&lt;/span&gt; : A&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;r7);

            buffer[start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;push_r(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; rt);
            buffer[start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;mov_rd_rm(rt, (bits.h1 &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; bits.rd);
            buffer[start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;ldr_rd_&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pc_im_4&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;(bits.rd, T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;Label(start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, end&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;);
            buffer[start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;add_rd_rm((bits.h1 &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; bits.rd, rt);
            buffer[start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pop_r(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; rt);
            &lt;span style=&#34;color:#555&#34;&gt;*--&lt;/span&gt;trailer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;uint32_t&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;(area &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; offset) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;;

            start &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;;
            end &lt;span style=&#34;color:#555&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;;
        } &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;32&lt;/span&gt;bit&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;i(backup[offset])) {
            buffer[start&lt;span style=&#34;color:#555&#34;&gt;++&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; backup[offset];
            buffer[start&lt;span style=&#34;color:#555&#34;&gt;++&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; backup[&lt;span style=&#34;color:#555&#34;&gt;++&lt;/span&gt;offset];
        } &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; {
            buffer[start&lt;span style=&#34;color:#555&#34;&gt;++&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; backup[offset];
        }
    }

    buffer[start&lt;span style=&#34;color:#555&#34;&gt;++&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;bx(A&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pc);
    buffer[start&lt;span style=&#34;color:#555&#34;&gt;++&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;nop;

    uint32_t &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;transfer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;uint32_t &lt;span style=&#34;color:#555&#34;&gt;*&amp;gt;&lt;/span&gt;(buffer &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; start);
    transfer[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; A&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;ldr_rd_&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;rn_im&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;(A&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pc, A&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pc, &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt;);
    transfer[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;uint32_t&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;(area &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; used &lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(uint16_t)) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;

    info&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;setCallOriginalIns(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;uint8_t &lt;span style=&#34;color:#555&#34;&gt;*&amp;gt;&lt;/span&gt;(buffer &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; pad) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;);

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;true&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;msgetinstructionwiththumb&#34;&gt;MSGetInstructionWithThumb&lt;/h5&gt;

&lt;p&gt;调用    used += MSGetInstructionWithThumb(reinterpret_cast&lt;uint8_t *&gt;(area) + used);
MSGetInstructionWithThumb: 参数为(uint16_t*).
返回结果: 为这条指令是多少字节的指令.(4 or 2)&lt;/p&gt;

&lt;p&gt;T$32bit$i的作用: (指令(ic) &amp;amp; 1110 0000 0000 0000) &amp;amp;&amp;amp; (ic &amp;amp; 0001 1000 0000 0000 != 0x0000);
第一个判断为确定高位3个bit(即bit[15], bit[14], bit[13])为1. 第二个判断为确保bit[12], bit[11]有值(即至少这两位有 1 位为 1).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;其实就是判断是该thumb指令是否为thumb32指令,&lt;/code&gt;
&lt;code&gt;thumb32指令的判断依据是 b[15:11] 为 0b11101或0b11110或0b11111.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;MSGetInstructionWithThumb:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; size_t &lt;span style=&#34;color:#c0f&#34;&gt;MSGetInstructionWidthThumb&lt;/span&gt;(&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;start) {
            uint16_t &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;thumb(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;uint16_t &lt;span style=&#34;color:#555&#34;&gt;*&amp;gt;&lt;/span&gt;(start));   &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;32&lt;/span&gt;bit&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;i(thumb[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;;
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;T$32bit$i:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;bool&lt;/span&gt; T&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;32&lt;/span&gt;bit&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;i(uint16_t ic) {
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; ((ic &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0xe000&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0xe000&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (ic &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0x1800&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0x0000&lt;/span&gt;);
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;分析memhelper类&#34;&gt;分析MemHelper类&lt;/h4&gt;

&lt;p&gt;有4个方法:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;static bool isFunctionAddr(void* addr);&lt;/li&gt;
&lt;li&gt;static bool unProtectMemory(void* addr, uint32_t size);  remove 写保护&lt;/li&gt;
&lt;li&gt;static bool protectMemory(void* addr, uint32_t size);    add    写保护&lt;/li&gt;
&lt;li&gt;static void* createExecMemory(uint32_t size);            创建一个可执行的内存&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;有4个field:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;std::vector&lt;void*&gt; all_memory_page;&lt;/li&gt;
&lt;li&gt;void* current_page = nullptr;&lt;/li&gt;
&lt;li&gt;uint32_t page_ptr  = 0;&lt;/li&gt;
&lt;li&gt;static uint32_t page_size;      // 构造函数&lt;code&gt;page_size = sysconf(_SC_PAGESIZE).&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我们现在分析一下&lt;code&gt;createExecMemory(uint32_t size)&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;可以看到, 分配内存的操作是通过&lt;code&gt;mmap&lt;/code&gt;实现的.&lt;/li&gt;
&lt;li&gt;all_memory_page是一个vector, 每个单位保存一个指针, 指向mmap的内存.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;createExecMemory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;FAHook&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;MemHelper&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;createExecMemory(uint32_t size) {
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(size &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;) {
        size &lt;span style=&#34;color:#555&#34;&gt;++&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(size &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; page_size) {
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(gMemHelper.current_page &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;nullptr&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; page_size &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; gMemHelper.page_ptr_ &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; size) {
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;auto&lt;/span&gt; funPtr &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;)((size_t)gMemHelper.current_page &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; gMemHelper.page_ptr_);
        gMemHelper.page_ptr_ &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; size;
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Align 4
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt;(gMemHelper.page_ptr_ &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0x3&lt;/span&gt;) {
            gMemHelper.page_ptr_ &lt;span style=&#34;color:#555&#34;&gt;++&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; funPtr;
    }
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// scroll to next page
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;auto&lt;/span&gt; newPage &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; mmap(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;, page_size, PROT_READ &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; PROT_WRITE &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; PROT_EXEC, MAP_ANONYMOUS &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; MAP_PRIVATE, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;);
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(newPage &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; MAP_FAILED) {
        gMemHelper.alloc_memory_page_.push_back(newPage);

        gMemHelper.current_page &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; newPage;
        gMemHelper.page_ptr_ &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;createExecMemory&lt;/span&gt;(size);
    }
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;nullptr&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;分析doinhook&#34;&gt;分析doInHook&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;主要操作: FAInHook::instance()-&amp;gt;hookAll();&lt;/li&gt;
&lt;li&gt;FAInHook::instance()-&amp;gt;unHookAll();&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;doInHook&lt;/span&gt;() {
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;bool&lt;/span&gt; isHooked &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;false&lt;/span&gt;;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (isHooked) {
        isHooked &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;false&lt;/span&gt;;
        FAInHook&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;instance()&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;unhookAll();
    } &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; {
        isHooked &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;true&lt;/span&gt;;
        FAInHook&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;instance()&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;hookAll();
    }
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;true&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;hookAll():&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;void FAInHook::hookAll() {
    for(auto it: hook_map) {
        if(it.second-&amp;gt;getHookStatus() == FAHook::REGISTERED) {
            Hook(it.second);
        }
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;进而转到Hook函数
1. 调用`enableJumpStub(info)
2. info-&amp;gt;setHookStatus(FAHook::HOOKED)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;bool FAInHook::Hook(FAHook::HookInfo *info) {
    if(!FAHook::Instruction::enableJumpStub(info)) {
        return false;
    }
    info-&amp;gt;setHookStatus(FAHook::HOOKED);
    return true;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分析&lt;code&gt;enableJumpStub(info)&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;bool FAHook::Instruction::enableJumpStub(FAHook::HookInfo *info) {
    auto origAddr = getOriginalAddr(info);
    auto len = info-&amp;gt;getJumpStubLen();
    auto stubAddr = info-&amp;gt;getJumpStubBack();
    return patchMemory(origAddr, stubAddr, len);
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到, 在得到了&lt;code&gt;origAddr&lt;/code&gt;和&lt;code&gt;stubAddr&lt;/code&gt;和&lt;code&gt;len&lt;/code&gt;之后,我们会进入到patch函数&lt;code&gt;patchMemory&lt;/code&gt;, 根据我们前面的分析, 它会patch原函数的入口指令的前(8 or 10?)个字节.&lt;/p&gt;

&lt;p&gt;patchMemory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;bool FAHook::Instruction::patchMemory(void *dest, void *src, uint32_t len) {
    if(dest == nullptr || src == nullptr || len == 0) {
        return false;
    }
    if(!MemHelper::unProtectMemory(dest, len)) {
        return false;
    }

    memcpy(dest, src, len);
    MemHelper::protectMemory(dest, len);
#ifdef __arm__
    cacheflush((Elf_Addr)dest, (Elf_Addr)dest + len, 0);
#endif
    return true;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;首先会调用&lt;code&gt;unProtectMemory&lt;/code&gt;函数来将对应内存修改为(rwx), 然后调用&lt;code&gt;memcpy&lt;/code&gt;来修改内存, 最后调用&lt;code&gt;protectMemory&lt;/code&gt;来修改对应内存为(r-x).&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;现在我们就基本对该项目进行了简单的分析, 我这里总结一下:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;registerHook
主要操作其实就是:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;createStub:  创建代理(这个代理就是要执行跳转到我们的&lt;code&gt;newFuncAddr&lt;/code&gt;函数)&lt;/li&gt;
&lt;li&gt;createCallOriginalStub:  call back代理(这个代理就是执行回调, 回调我们的&lt;code&gt;originalFunAddr&lt;/code&gt;.) 主要涉及处理pc相关指令(原因在文中已经有介绍).
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;doInHook&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;主要就是patchMemory. patch我们originalFunAddr的函数起始处的几个指令为&lt;code&gt;stubInstruction&lt;/code&gt;.之后函数涉及pc相关指令的修复, 方便继续执行原函数.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;unHook&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;也是patchMemory.
就是将我们原函数的原始指令进行复原.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
      
    </item>
    
    <item>
      <title>装机日志-deepin</title>
      <link>https://l0phtg.github.io/post/%E8%A3%85%E6%9C%BA%E6%97%A5%E5%BF%97-deepin/</link>
      <pubDate>Thu, 28 Dec 2017 11:47:58 +0000</pubDate>
      
      <guid>https://l0phtg.github.io/post/%E8%A3%85%E6%9C%BA%E6%97%A5%E5%BF%97-deepin/</guid>
      
        <description>&lt;p&gt;17年使用了一段时间deepin系统, 这里简单记录一些使用心得(现在已转ubuntu.&lt;/p&gt;

&lt;p&gt;主要就是&lt;strong&gt;装机的过程&lt;/strong&gt;, 以及&lt;strong&gt;装机后的效果展示&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://l0phtg.github.io/deepin/desktop.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;最近一直在码代码和写.md, 深刻体会到在windows上办公有多么艰难. 安装了一下&lt;code&gt;spacevim/neovim&lt;/code&gt;后, 意识到了高效率的办公会给人带来很大的乐趣. 所以, 在遇到了很多与环境配置相关的问题(却解决不了之后), 毅然决定更换系统.&lt;/p&gt;

&lt;h2 id=&#34;选择&#34;&gt;选择&lt;/h2&gt;

&lt;p&gt;犹豫了一天到底是该装&lt;code&gt;Ubuntu16.04&lt;/code&gt;还是&lt;code&gt;deepin&lt;/code&gt;(&lt;code&gt;导致上课前, 忘了给舍友刷卡...&lt;/code&gt;).最终还是经不住deepin&lt;code&gt;绚丽的UI设计&lt;/code&gt;的诱惑, 决定尝试一下&lt;code&gt;deepin&lt;/code&gt;.(&lt;strong&gt;没错, 颜值在我心中就是这么重要&lt;/strong&gt;)&lt;/p&gt;

&lt;h2 id=&#34;装机过程&#34;&gt;装机过程&lt;/h2&gt;

&lt;p&gt;装机过程很简单, 下载好官方的镜像源, 之后检验一下&lt;strong&gt;md5&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#033&#34;&gt;$checksum&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后用&lt;strong&gt;官方的启动盘制作工具&lt;/strong&gt;把U盘装入deepin, 重启时插入U盘, 设置为U盘启动就可以了.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;重点来了&lt;/strong&gt;, 因为我不想用windows10了, 所以直接把系统装在c盘中, 因为原来的系统有&lt;strong&gt;3个分区, 所以装机时不用格式化 D 盘 和 E 盘&lt;/strong&gt;(&lt;code&gt;我的E盘有7/8个虚拟机文件, 在装好deepin后, 依然可以正常使用&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;装机总结:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;deepin系统装入c盘.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;D盘, E盘可以不用格式化.(当然, 如果电脑里没啥重要文件的, skip it)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;下来就是激动人心的时刻了&#34;&gt;下来就是激动人心的时刻了&lt;/h2&gt;

&lt;p&gt;先放几张图:&lt;/p&gt;

&lt;p&gt;桌面&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://l0phtg.github.io/deepin/desktop.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;分屏&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://l0phtg.github.io/deepin/splitScreen.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我们最爱的vim&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://l0phtg.github.io/deepin/vimMarkdownPreview.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;当然, 还有很多其它的不错的设计, 这里就不多放图了.&lt;/p&gt;

&lt;h3 id=&#34;配置nvim-spacevim&#34;&gt;配置nvim/spacevim&lt;/h3&gt;

&lt;p&gt;依赖项:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;python支持: 建议先&lt;code&gt;pip install neovim&lt;/code&gt;和&lt;code&gt;pip3 install neovim&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;font支持: (读者可以自行查看readme进行安装) git地址: &lt;code&gt;https://github.com/powerline/fonts.git&lt;/code&gt; , 用来更好的显示vim界面(字体, 状态栏&amp;hellip;).&lt;/li&gt;
&lt;li&gt;tagbar支持: 安装 &lt;code&gt;ctags&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo apt install ctags&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;安装&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;neovim安装: &lt;code&gt;sudo apt install neovim&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Spacevim安装: (读者可以自行查看readme进行安装) git地址: &lt;code&gt;https://github.com/SpaceVim/SpaceVim&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;init.nvim(来, 放出我们的口号: &lt;strong&gt;打造属于自己的编辑器&lt;/strong&gt;, 这个文件是用户配置文件, 读者可以自行配置)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我这里只是对自己的需求进行了简单的配置:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;配置markdown预览:(因为它默认预览采用的插件是&lt;code&gt;iamcoo/MarkdownPreview.vim&lt;/code&gt;, 所以根据该插件作者的说明进行配置)&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;默认预览浏览器为&lt;code&gt;google-chrome&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;let&lt;/span&gt; g:mkdp_path_to_chrome &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;google-chrome&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;映射预览为&lt;code&gt;F4&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;nmap &amp;lt;silent&amp;gt; &amp;lt;F4&amp;gt; &amp;lt;Plug&amp;gt;MarkdownPreview        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; for normal mode
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;imap &amp;lt;silent&amp;gt; &amp;lt;F4&amp;gt; &amp;lt;Plug&amp;gt;MarkdownPreview        &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; insert mode&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;设置状态栏分隔符为箭头:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;let&lt;/span&gt; g:spacevim_statusline_separator &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;arrow&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;配置zsh-oh-my-zsh&#34;&gt;配置zsh/oh-my-zsh&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;安装zsh&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt install zsh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;安装oh-my-zsh&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sh -c &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;$(&lt;/span&gt;curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;具体的配置看个人喜好.&lt;/p&gt;

&lt;h3 id=&#34;安装tools&#34;&gt;安装tools&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/PikachuHy/..&#34;&gt;https://github.com/PikachuHy/..&lt;/a&gt;.       &lt;code&gt;一位大佬写的net工具,  大家懂得&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;总之, &lt;code&gt;deepin&lt;/code&gt;还是带给我很大的惊喜的.  &lt;code&gt;deepin终端&lt;/code&gt;, &lt;code&gt;深度截图&lt;/code&gt;, 还可以愉快的使用网络, 开心的在linux下办公hahahahaha.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>thumb指令虚拟化学习(一)</title>
      <link>https://l0phtg.github.io/post/thumb%E6%8C%87%E4%BB%A4%E8%99%9A%E6%8B%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B8%80/</link>
      <pubDate>Tue, 24 Oct 2017 20:23:30 +0800</pubDate>
      
      <guid>https://l0phtg.github.io/post/thumb%E6%8C%87%E4%BB%A4%E8%99%9A%E6%8B%9F%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B8%80/</guid>
      
        <description>&lt;p&gt;&lt;img src=&#34;https://l0phtg.github.io/thumb-vmp/thumb16.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;上半年接触过一些 &lt;strong&gt;app加固&lt;/strong&gt; 的知识, 对 &lt;strong&gt;vm&lt;/strong&gt; 这块一直空有兴趣而没有了解过;  最近, 阅读了几篇文章, &lt;code&gt;有所启发&lt;/code&gt;, 所以决定学习一下 &lt;strong&gt;vm&lt;/strong&gt; 这块的一些操作.&lt;/p&gt;

&lt;p&gt;主要内容分为:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;环境搭建&lt;/li&gt;
&lt;li&gt;提取指令&lt;/li&gt;
&lt;li&gt;capstone处理&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;阅读资料&#34;&gt;阅读资料&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/knownsec/KCon/blob/master/2017/%5BKCon%202017%5D0827_3_%E9%99%88%E6%84%89%E9%91%AB_%E7%AC%AC%E4%BA%94%E4%BB%A3%E5%8A%A0%E5%9B%BA%E6%8A%80%E6%9C%AFARM%20VMP%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0%E4%B8%8E%E5%BA%94%E7%94%A8.pdf&#34;&gt;Kcon2017 第五代加固技术ARM VMP原理与应用&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cnblogs.com/2014asm/p/6534897.html&#34;&gt;ARM平台指令虚拟化探索&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;环境搭建&#34;&gt;环境搭建:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;需要安装python的capstone模块, 可以直接使用pip安装. (另外: &lt;strong&gt;强烈建议下载capstone源码, 以便随时阅读&lt;/strong&gt;.)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    sudo apt install libcapstone3
    sudo apt install libcapstone-dev
    pip install capstone&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ida/radare2 &lt;code&gt;在本节中, 提取指令的时候会用到&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;arm官方文档(&lt;a href=&#34;https://yurichev.com/mirrors/ARMv8-A_Architecture_Reference_Manual_(Issue_A.a).pdf&#34;&gt;https://yurichev.com/mirrors/ARMv8-A_Architecture_Reference_Manual_(Issue_A.a).pdf&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;本篇文章大致分为如下几个部分&#34;&gt;本篇文章大致分为如下几个部分:&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;手动提取编译好的可执行文件中的 &lt;strong&gt;你想要加密的函数&lt;/strong&gt;, 并转换为 &lt;strong&gt;16进制的格式&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;初步了解 &lt;strong&gt;capstone&lt;/strong&gt; 中的 &lt;strong&gt;对Arm指令进行处理的操作函数&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;了解 &lt;strong&gt;thumb指令编码&lt;/strong&gt; , &lt;code&gt;此处研究thumb的原因是: 在提出函数的bytes时, 发现自定义的函数, 都被转换成了thumb指令的格式, 所以笔者先研究thumb;  当然, 要知道, thumb并不是独立于arm存在的, thumb的存在是为了提高效率&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;设计自己的一套 &lt;strong&gt;指令集&lt;/strong&gt; , &lt;code&gt;很简单的一套指令集, 能模拟常见的thumb指令, 例如 push, pop, str, ldr, add, sub, mov, cmp, blx ...&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;写代码, &lt;code&gt;此处参考了capstone源码中的/bindings/python/capstone/* 中的有关代码, 初学py, 代码写的差, 有什么建议还请多多交流)&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;提取指令&#34;&gt;提取指令.&lt;/h3&gt;

&lt;p&gt;我们提取的是下面程序中的 &lt;strong&gt;judge&lt;/strong&gt; 函数.&lt;/p&gt;

&lt;h4 id=&#34;用ida提取&#34;&gt;用ida提取:&lt;/h4&gt;

&lt;p&gt;我们将会在这篇文章中用到的程序:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#099&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt; key[&lt;span style=&#34;color:#f60&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;q&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;s&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;k&amp;#39;&lt;/span&gt;};

&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;judge&lt;/span&gt;(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;s)
{
    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; ret &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt; c[&lt;span style=&#34;color:#f60&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;4&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;q&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;s&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;h&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;u&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;n&amp;#39;&lt;/span&gt;};
    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; i;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;16&lt;/span&gt;; i&lt;span style=&#34;color:#555&#34;&gt;++&lt;/span&gt;)
    {
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;switch&lt;/span&gt;(i &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;)   
        {
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; 
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (s[i]  &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; c[i])
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;continue&lt;/span&gt;;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;;  
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (s[i] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; c[i])
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;continue&lt;/span&gt;;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (s[i] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; c[i])
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;continue&lt;/span&gt;;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (s[i] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; c[i])
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;continue&lt;/span&gt;; 
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        } 
        ret &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;; 
    }
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; ret;
}

&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;argv[])
{
    printf(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;hello World&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt; a[&lt;span style=&#34;color:#f60&#34;&gt;16&lt;/span&gt;];
    scanf(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, a);

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (judge(a) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
        printf(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;ok&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;
        printf(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;error&amp;#34;&lt;/span&gt;);

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用ndk-build编译成armv7a可执行程序后, 放入ida中, 用idc脚本提::&lt;/p&gt;

&lt;p&gt;idc脚本, start为judge函数的起始地址, end为judge函数的结束地址.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#099&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;&amp;lt;idc.idc&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;auto&lt;/span&gt; start, end, fd, i, inst;
    fd &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fopen(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;D:&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;idaResult&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;armOpcodeByte.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;wt+&amp;#34;&lt;/span&gt;);
    start &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0x863c&lt;/span&gt;;
    end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0x86BA&lt;/span&gt;;
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt;(i &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; start; i &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; end; i&lt;span style=&#34;color:#555&#34;&gt;++&lt;/span&gt;) {
        inst &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Byte(i);
        fprintf(fd, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;x%02x&amp;#34;&lt;/span&gt;, inst);
    }
    fclose(fd);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;提取出来后的结果:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;\x1f\x49\xf0\xb5\x79\x44\x09\x68\x87\xb0\x07\x46\x0b\x68\x01\xaa\x0d\x46\x16\x46\x05\x93\x1b\x4b\x7b\x44\x03\xf1\x10\x0e\x18\x68\x08\x33\x53\xf8\x04\x1c\x73\x45\x14\x46\x03\xc4\x22\x46\xf6\xd1\x3a\x46\x00\x23\x01\x20\x03\xf0\x03\x01\x02\x29\x09\xd0\x03\x29\x0a\xd0\x01\x29\x02\xd0\x14\x78\xf1\x5c\x08\xe0\x11\x78\x01\x31\x04\xe0\x11\x78\x02\x31\x01\xe0\x11\x78\x03\x31\xf4\x5c\x01\x33\xa1\x42\x18\xbf\x00\x20\x10\x2b\x02\xf1\x01\x02\xe3\xd1\x05\x9a\x2b\x68\x9a\x42\x01\xd0\xff\xf7\x0a\xef\x07\xb0\xf0\xbd&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;用radare2提取&#34;&gt;用radare2提取&lt;/h4&gt;

&lt;p&gt;(才发现原来radare2 v2.0都已经发布了)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;对r2语法不做讲解了, 网上也有了一些文章, 大家可以去看&lt;/code&gt;.  笔者本身也不是很熟悉~&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;username-l0phtg@L0phTg:armeabi-v7a$ r2 &lt;span style=&#34;color:#366&#34;&gt;test&lt;/span&gt;
 -- Interpret radare2 scripts with &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;. &amp;lt;path-to-script&amp;gt;&amp;#39;&lt;/span&gt;. Similar to the bash &lt;span style=&#34;color:#366&#34;&gt;source&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;alias&lt;/span&gt; command.
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;0x000085a0&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt;&amp;gt; aa
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;x&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; Analyze all flags starting with sym. and entry0 &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;aa&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;0x000085a0&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt;&amp;gt; afl~judge
0x0000863c   &lt;span style=&#34;color:#f60&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;126&lt;/span&gt;          sym.judge
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;0x000085a0&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt;&amp;gt; 0x863c
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;0x0000863c&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt;&amp;gt; pcp &lt;span style=&#34;color:#f60&#34;&gt;126&lt;/span&gt;
import struct
&lt;span style=&#34;color:#033&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; struct.pack &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;126B&amp;#34;&lt;/span&gt;, *&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;
0x1f,0x49,0xf0,0xb5,0x79,0x44,0x09,0x68,0x87,0xb0,0x07,
0x46,0x0b,0x68,0x01,0xaa,0x0d,0x46,0x16,0x46,0x05,0x93,
0x1b,0x4b,0x7b,0x44,0x03,0xf1,0x10,0x0e,0x18,0x68,0x08,
0x33,0x53,0xf8,0x04,0x1c,0x73,0x45,0x14,0x46,0x03,0xc4,
0x22,0x46,0xf6,0xd1,0x3a,0x46,0x00,0x23,0x01,0x20,0x03,
0xf0,0x03,0x01,0x02,0x29,0x09,0xd0,0x03,0x29,0x0a,0xd0,
0x01,0x29,0x02,0xd0,0x14,0x78,0xf1,0x5c,0x08,0xe0,0x11,
0x78,0x01,0x31,0x04,0xe0,0x11,0x78,0x02,0x31,0x01,0xe0,
0x11,0x78,0x03,0x31,0xf4,0x5c,0x01,0x33,0xa1,0x42,0x18,
0xbf,0x00,0x20,0x10,0x2b,0x02,0xf1,0x01,0x02,0xe3,0xd1,
0x05,0x9a,0x2b,0x68,0x9a,0x42,0x01,0xd0,0xff,0xf7,0x0a,
0xef,0x07,0xb0,0xf0,0xbd&lt;span style=&#34;color:#555&#34;&gt;])&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;0x0000863c&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;了解capstone中对arm指令进行操作的函数-接口&#34;&gt;了解capstone中对arm指令进行操作的函数 &lt;code&gt;接口&lt;/code&gt;&lt;/h3&gt;

&lt;h4 id=&#34;从源代码中提供的-example-来初步了解capstone提供给我们的可用的-接口-的使用&#34;&gt;从源代码中提供的&lt;code&gt;example&lt;/code&gt;, 来初步了解capstone提供给我们的可用的&lt;code&gt;接口&lt;/code&gt;的使用&lt;/h4&gt;

&lt;p&gt;我们参考的主要是 &lt;code&gt;/bindings/python/test_arm.py&lt;/code&gt; 和 &lt;code&gt;/bindings/python/test_detail.py&lt;/code&gt;这两个文件:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;test_arm.py   &lt;code&gt;源代码过多, 这里就不全部都放上来了&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Capstone Python bindings, by Nguyen Anh Quynnh &amp;lt;aquynh@gmail.com&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;__future__&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; print_function
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;capstone&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;capstone.arm&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;xprint&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; to_hex, to_x, to_x_32

ARM_CODE &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\xED\xFF\xFF\xEB\x04\xe0\x2d\xe5\x00\x00\x00\x00\xe0\x83\x22\xe5\xf1\x02\x03\x0e\x00\x00\xa0\xe3\x02\x30\xc1\xe7\x00\x00\x53\xe3\x00\x02\x01\xf1\x05\x40\xd0\xe8\xf4\x80\x00\x00&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;
THUMB_CODE &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\x70\x47\x00\xf0\x10\xe8\xeb\x46\x83\xb0\xc9\x68\x1f\xb1\x30\xbf\xaf\xf3\x20\x84&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;

all_tests &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (
        (CS_ARCH_ARM, CS_MODE_ARM, ARM_CODE, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;ARM&amp;#34;&lt;/span&gt;, None),
        (CS_ARCH_ARM, CS_MODE_THUMB, THUMB_CODE, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Thumb&amp;#34;&lt;/span&gt;, None),
        )

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;print_insn_detail&lt;/span&gt;(insn):
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# print address, mnemonic and operands&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;0x&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%x&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; (insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;address, insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;mnemonic, insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;op_str))

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# &amp;#34;data&amp;#34; instruction generated by SKIPDATA option has no detail&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;operands) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;op_count: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;operands))
        c &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;operands:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; ARM_OP_REG:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;operands[&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;].type: REG = &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; (c, insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reg_name(i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reg)))
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; ARM_OP_IMM:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;operands[&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;].type: IMM = 0x&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; (c, to_x_32(i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;imm)))
&lt;span style=&#34;color:#555&#34;&gt;...............................&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; ARM_OP_MEM:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;operands[&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;].type: MEM&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; c)
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;mem&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;base &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t\t\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;operands[&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;].mem.base: REG = &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; \
                        &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; (c, insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reg_name(i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;mem&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;base)))
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;mem&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t\t\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;operands[&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;].mem.index: REG = &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; \
                        &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; (c, insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reg_name(i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;mem&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index)))
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;mem&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;scale &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t\t\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;operands[&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;].mem.scale: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; \
                        &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; (c, i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;mem&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;scale))
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;mem&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;disp &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t\t\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;operands[&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;].mem.disp: 0x&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; \
                        &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; (c, to_x_32(i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;mem&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;disp)))
&lt;span style=&#34;color:#555&#34;&gt;...............................&lt;/span&gt;
            c &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;update_flags:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;Update-flags: True&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;writeback:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;Write-back: True&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;cc &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; [ARM_CC_AL, ARM_CC_INVALID]:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;Code condition: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;cc)
&lt;span style=&#34;color:#555&#34;&gt;...............................&lt;/span&gt;

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;### Test class Cs&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;test_class&lt;/span&gt;():

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; (arch, mode, code, comment, syntax) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; all_tests:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;16&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Platform: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; comment)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Code: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; to_hex(code))
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Disasm:&amp;#34;&lt;/span&gt;)

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
            md &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Cs(arch, mode)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; syntax:
                md&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;syntax &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; syntax
            md&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;detail &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; True
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; insn &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; md&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;disasm(code, &lt;span style=&#34;color:#f60&#34;&gt;0x80001000&lt;/span&gt;):
                print_insn_detail(insn)
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt; ()
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;0x&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%x&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; (insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size))
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; CsError &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; e:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;ERROR: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; e)


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    test_class()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;观察&lt;code&gt;test_arm.py&lt;/code&gt;, 我们可以看到的重要的一些操作有:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;md &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Cs(arch, mode)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; insn &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; md&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;disasm(code, &lt;span style=&#34;color:#f60&#34;&gt;0x80001000&lt;/span&gt;):
    print_insn_detail(insn)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;首先通过&lt;code&gt;md = Cs(arch, mode)&lt;/code&gt;来选择我们的架构, 然后调用&lt;code&gt;md.disasm&lt;/code&gt;返回 指令(insn) (这里Cs.disasm就是一个生成器, 参看py语法)
然后打印&lt;code&gt;insn&lt;/code&gt;的细节(助记符, 操作数, 以及每个操作数的类型等)&lt;/p&gt;

&lt;p&gt;打印的时候(这里我只列举了部分操作):
- 我们可以发现 &lt;strong&gt;针对指令&lt;/strong&gt; 调用了 &lt;strong&gt;insn.address&lt;/strong&gt;, &lt;strong&gt;insn.mnemonic&lt;/strong&gt;,  &lt;strong&gt;insn.op_str&lt;/strong&gt;, &lt;strong&gt;insn.operands&lt;/strong&gt;, &lt;strong&gt;insn.update_flags&lt;/strong&gt;, &lt;strong&gt;insn.cc&lt;/strong&gt;&amp;hellip;..
- 针对 &lt;strong&gt;操作数&lt;/strong&gt; 调用了 &lt;strong&gt;i.type&lt;/strong&gt;, &lt;strong&gt;i.reg&lt;/strong&gt;, &lt;strong&gt;i.mem&lt;/strong&gt;&amp;hellip;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;test_detail.py (省略了一些和上面test_arm.py相似的代码)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;..........&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;print_detail&lt;/span&gt;(insn):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;0x&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%x&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;  // insn-ID: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;, insn-mnem: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; \
        &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; (insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;address, insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;mnemonic, insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;op_str, insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;id&lt;/span&gt;, \
        insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;insn_name()))

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# &amp;#34;data&amp;#34; instruction generated by SKIPDATA option has no detail&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;regs_read) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;Implicit registers read: &amp;#34;&lt;/span&gt;, end&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;),
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; m &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;regs_read:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reg_name(m), end&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;),
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;regs_write) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;Implicit registers modified: &amp;#34;&lt;/span&gt;, end&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;),
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; m &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;regs_write:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reg_name(m), end&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;),
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;groups) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;This instruction belongs to groups: &amp;#34;&lt;/span&gt;, end&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;),
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; m &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;groups:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group_name(m), end&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;),
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;()&lt;span style=&#34;color:#c30&#34;&gt;``&lt;/span&gt;
        &lt;span style=&#34;color:#555&#34;&gt;....................................&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;操作很明显:
&lt;strong&gt;insn.regs_read&lt;/strong&gt;, &lt;strong&gt;insn.regs_write&lt;/strong&gt;, &lt;strong&gt;insn.groups&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&#34;观察源代码中的-bindings-python-capstone-init-py-来了解-cs-和-csinsn-的实现&#34;&gt;观察源代码中的&lt;code&gt;/bindings/python/capstone/__init__.py&lt;/code&gt;来了解&lt;strong&gt;CS&lt;/strong&gt; 和 &lt;strong&gt;CsInsn&lt;/strong&gt; 的实现:&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Cs&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;object&lt;/span&gt;):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, arch, mode):
        &lt;span style=&#34;color:#555&#34;&gt;....&lt;/span&gt;
        &lt;span style=&#34;color:#555&#34;&gt;....&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;省略&lt;/span&gt;


    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Disassemble binary &amp;amp; return disassembled instructions in CsInsn objects   反汇编二进制代码&amp;amp;&amp;amp; 返回反汇编的指令in CsInsn对象中&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;disasm&lt;/span&gt;(self, code, offset, count&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;):
        all_insn &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; ctypes&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;POINTER(_cs_insn)()
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&amp;#39;if not _python2:
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            print(code)
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            code = code.encode()
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            print(code)&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Hack, unicorn&amp;#39;s memory accessors give you back bytearrays, but they&lt;/span&gt;
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# cause TypeErrors when you hand them into Capstone.&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;isinstance&lt;/span&gt;(code, &lt;span style=&#34;color:#366&#34;&gt;bytearray&lt;/span&gt;):
            code &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bytes&lt;/span&gt;(code)
        res &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; _cs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;cs_disasm(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;csh, code, &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(code), offset, count, ctypes&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;byref(all_insn))&lt;span style=&#34;color:#555&#34;&gt;*************&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; res &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(res):
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;yield&lt;/span&gt; CsInsn(self, all_insn[i])         &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;## all_info*********************************** 重点操作&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;finally&lt;/span&gt;:
                _cs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;cs_free(all_insn, res)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            status &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; _cs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;cs_errno(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;csh)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; status &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; CS_ERR_OK:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; CsError(status)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;yield&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过观察&lt;strong&gt;Cs&lt;/strong&gt;这个类的实现, 我们发现了它是一个生成器, 一直返回&lt;strong&gt;CsInsn&lt;/strong&gt; 这个类的对象, 现在我们来看一下CsInsn 这个类的实现(从名字可以就可以看出来, 它保存了我们每条指令的性质)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;▼&lt;/span&gt; CsInsn : &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt;
   &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;__init__&lt;/span&gt; : function
   &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;id&lt;/span&gt; : function           &lt;span style=&#34;color:#99f&#34;&gt;@property&lt;/span&gt;
   &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;address : function      &lt;span style=&#34;color:#99f&#34;&gt;@property&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;返回&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;指令的地址&lt;/span&gt;
   &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;size : function         &lt;span style=&#34;color:#99f&#34;&gt;@property&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;返回&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;大小&lt;/span&gt;
   &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;bytes&lt;/span&gt; : function        &lt;span style=&#34;color:#99f&#34;&gt;@property&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;返回&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;字节码&lt;/span&gt; []
   &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;mnemonic : function     &lt;span style=&#34;color:#99f&#34;&gt;@property&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;返回&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;指令名称&lt;/span&gt;(&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;助记符&lt;/span&gt;)
   &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;op_str : function       &lt;span style=&#34;color:#99f&#34;&gt;@property&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;返回&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;操作&lt;/span&gt;string
   &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;regs_read : function    &lt;span style=&#34;color:#99f&#34;&gt;@property&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;返回&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;会被&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;隐式&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;读的寄存器&lt;/span&gt;[]
   &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;regs_write : function   &lt;span style=&#34;color:#99f&#34;&gt;@property&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;返回&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;会被&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;隐式&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;写的寄存器&lt;/span&gt;[]
   &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;groups : function       &lt;span style=&#34;color:#99f&#34;&gt;@property&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;指令的&lt;/span&gt;group
   &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;__gen_detail : function
   &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;__getattr__ : function
   &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;errno : function
   &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;reg_name : function   (self, reg_id)  &lt;span style=&#34;color:#555&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;返回寄存器的名称&lt;/span&gt;
   &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;insn_name : function                  &lt;span style=&#34;color:#555&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;返回指令名称&lt;/span&gt;, &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;不同于&lt;/span&gt;mnemonic
   &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;group_name : function
   &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;group : function
   &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;reg_read : function   (self, reg_id)  &lt;span style=&#34;color:#555&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;识别该寄存器会被隐式&lt;/span&gt;read
   &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;reg_write : function  (self, reg_id)  &lt;span style=&#34;color:#555&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;识别该寄存器是否会被隐式&lt;/span&gt; write
   &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;op_count : function
   &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;op_find : function&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里我罗列了一下它的所有操作,  我们下面写代码的时候会用到.&lt;/p&gt;

&lt;h4 id=&#34;这里我们先简单写一个-py-来对上面的部分函数进行应用&#34;&gt;这里我们先简单写一个.py, 来对上面的部分函数进行应用&lt;/h4&gt;

&lt;p&gt;我们可以先看一下输出结果:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;l0phtg&lt;span style=&#34;color:#99f&#34;&gt;@l0phtg&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;PC:&lt;span style=&#34;color:#555&#34;&gt;~/&lt;/span&gt;blogTest&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt; python test&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;py 
&lt;span style=&#34;color:#f60&#34;&gt;0x1000&lt;/span&gt;: push    {r4, r6, r7, lr}
&lt;span style=&#34;color:#366&#34;&gt;id&lt;/span&gt;:&lt;span style=&#34;color:#f60&#34;&gt;426&lt;/span&gt;  groups:[&lt;span style=&#34;color:#f60&#34;&gt;150&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;151&lt;/span&gt;]   size:&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;  
&lt;span style=&#34;color:#366&#34;&gt;bytes&lt;/span&gt;:  &lt;span style=&#34;color:#f60&#34;&gt;0xd0&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0xb5&lt;/span&gt; 
    op_count: &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;
        operands[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;: REG &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; r4
        operands[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;: REG &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; r6
        operands[&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;: REG &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; r7
        operands[&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;: REG &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; lr

&lt;span style=&#34;color:#f60&#34;&gt;0x1002&lt;/span&gt;: pop {r4, r6, r7, pc}
&lt;span style=&#34;color:#366&#34;&gt;id&lt;/span&gt;:&lt;span style=&#34;color:#f60&#34;&gt;425&lt;/span&gt;  groups:[&lt;span style=&#34;color:#f60&#34;&gt;150&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;151&lt;/span&gt;]   size:&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;  
&lt;span style=&#34;color:#366&#34;&gt;bytes&lt;/span&gt;:  &lt;span style=&#34;color:#f60&#34;&gt;0xd0&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0xbd&lt;/span&gt; 
    op_count: &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;
        operands[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;: REG &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; r4
        operands[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;: REG &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; r6
        operands[&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;: REG &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; r7
        operands[&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;: REG &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; pc

&lt;span style=&#34;color:#f60&#34;&gt;0x1004&lt;/span&gt;: beq &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#0x100e&lt;/span&gt;
&lt;span style=&#34;color:#366&#34;&gt;id&lt;/span&gt;:&lt;span style=&#34;color:#f60&#34;&gt;17&lt;/span&gt;   groups:[&lt;span style=&#34;color:#f60&#34;&gt;150&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;151&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]    size:&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;  
&lt;span style=&#34;color:#366&#34;&gt;bytes&lt;/span&gt;:  &lt;span style=&#34;color:#f60&#34;&gt;0x3&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0xd0&lt;/span&gt; 
    op_count: &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        operands[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;: IMM &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0x100e&lt;/span&gt;

&lt;span style=&#34;color:#f60&#34;&gt;0x1006&lt;/span&gt;: movs    r0, &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#0&lt;/span&gt;
&lt;span style=&#34;color:#366&#34;&gt;id&lt;/span&gt;:&lt;span style=&#34;color:#f60&#34;&gt;80&lt;/span&gt;   groups:[&lt;span style=&#34;color:#f60&#34;&gt;150&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;151&lt;/span&gt;]   size:&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;  
&lt;span style=&#34;color:#366&#34;&gt;bytes&lt;/span&gt;:  &lt;span style=&#34;color:#f60&#34;&gt;0x0&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0x20&lt;/span&gt; 
    op_count: &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;
        operands[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;: REG &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; r0
        operands[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;: IMM &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0x0&lt;/span&gt;
    Update&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;flags: True&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;每条指令的指令名称, 指令操作数, 操作数类型, 该指令是否更新flag都显示了出来.&lt;/p&gt;

&lt;p&gt;下面的代码(参考test_arm.py的实现)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#!/usr/bin/env python2&lt;/span&gt;
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#-*- coding:utf-8 -*-&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;capstone&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;capstone.arm&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;xprint&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; to_hex, to_x, to_x_32

my_thumb_code &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\xd0\xb5\xd0\xbd\x03\xd0\x00\x20&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;print_insn_detail&lt;/span&gt;(insn):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;0x&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%x&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; (insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;address, insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;mnemonic, insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;op_str))
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;id:&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;groups:&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;size:&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%x&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; (insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;id&lt;/span&gt;, insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;groups, insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size))
    sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;stdout&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;bytes:&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;bytes&lt;/span&gt;:
        sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;stdout&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hex&lt;/span&gt;(i))
    sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;stdout&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;operands) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;op_count: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;operands))
        c &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;operands:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; ARM_OP_REG:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;operands[&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;].type: REG = &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; (c, insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reg_name(i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reg)))
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; ARM_OP_IMM:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;operands[&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;].type: IMM = 0x&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; (c, to_x_32(i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;imm)))
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; ARM_OP_PIMM:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;operands[&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;].type: P-IMM = &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; (c, i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;imm))
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; ARM_OP_CIMM:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;operands[&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;].type: C-IMM = &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; (c, i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;imm))
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; ARM_OP_FP:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;operands[&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;].type: FP = &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; (c, i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fp))
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; ARM_OP_SYSREG:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;operands[&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;].type: SYSREG = &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; (c, i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reg))
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; ARM_OP_SETEND:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;setend &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; ARM_SETEND_BE:
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;operands[&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;].type: SETEND = be&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; c)
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;operands[&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;].type: SETEND = le&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; c)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; ARM_OP_MEM:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;operands[&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;].type: MEM&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; c)
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;mem&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;base &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t\t\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;operands[&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;].mem.base: REG = &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; \
                        &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; (c, insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reg_name(i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;mem&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;base)))
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;mem&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t\t\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;operands[&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;].mem.index: REG = &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; \
                        &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; (c, insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reg_name(i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;mem&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index)))
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;mem&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;scale &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t\t\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;operands[&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;].mem.scale: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; \
                        &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; (c, i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;mem&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;scale))
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;mem&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;disp &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t\t\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;operands[&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;].mem.disp: 0x&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; \
                        &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; (c, to_x_32(i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;mem&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;disp)))

            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;shift&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; ARM_SFT_INVALID &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;shift&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t\t\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;Shift: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; = &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; \
                    &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; (i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;shift&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;, i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;shift&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value))
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;vector_index &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t\t\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;operands[&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;].vector_index = &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt;(c, i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;vector_index))
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;subtracted:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t\t\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;operands[&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%u&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;].subtracted = True&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt;c)

            c &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; insn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;update_flags:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;Update-flags: True&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;test_class&lt;/span&gt;():

    md &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Cs(CS_ARCH_ARM, CS_MODE_THUMB)
    md&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;detail&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;True
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; insn &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; md&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;disasm(my_thumb_code, &lt;span style=&#34;color:#f60&#34;&gt;0x1000&lt;/span&gt;):
        print_insn_detail(insn)
        sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;stdout&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    test_class()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;了解-thumb-的指令编码&#34;&gt;了解 thumb 的指令编码:&lt;/h3&gt;

&lt;p&gt;在前面环境搭建的时候, 我向大家推荐了arm的一个文档, 本节主要针对该文档进行分析.&lt;/p&gt;

&lt;p&gt;首先定位到第&lt;code&gt;F3&lt;/code&gt;章节, 观看目录:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;Chapter F3

T32 Base Instruction Set Encoding

This chapter introduces the T32 instruction set and describes how it uses the ARM programmers’ model. It contains

the following sections:


• T32 instruction set encoding on page F3-2432.

• 16-bit T32 instruction encoding on page F3-2435.

• 32-bit T32 instruction encoding on page F3-2442.&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们在此分析的是&lt;strong&gt;16-bit T32 instruction&lt;/strong&gt;, 再次定位到&lt;code&gt;F3-2435&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://l0phtg.github.io/thumb-vmp/thumb16.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>elf文件格式和AndroidLinker加载.so的源码分析</title>
      <link>https://l0phtg.github.io/post/elf%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%92%8Candroidlinker%E5%8A%A0%E8%BD%BD-so%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 19 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://l0phtg.github.io/post/elf%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%92%8Candroidlinker%E5%8A%A0%E8%BD%BD-so%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      
        <description>&lt;p&gt;最近在学习android应用的加壳和混淆方法, 所以遇到了一些有关.so是如何加载到android中去的问题, 看了一些视频和文章, 所以想在此总结一下.&lt;/p&gt;

&lt;p&gt;本文主要内容:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;elf的文件格式&lt;/li&gt;
&lt;li&gt;分析linker的源码, 主要dlopen流程.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;elf文件格式&#34;&gt;elf文件格式&lt;/h2&gt;

&lt;p&gt;本文只对elf文件格式进行简单的分析, 如果要进行深入的了解, 推荐&lt;code&gt;&amp;lt;&amp;lt;程序员的自我修养&amp;gt;&amp;gt;&lt;/code&gt;中第3章.&lt;/p&gt;

&lt;p&gt;/usr/includ/elf.h中定义了elf文件头结构和相关的常数.&lt;/p&gt;

&lt;p&gt;分析elf文件时, 建议使用&lt;code&gt;010 editor&lt;/code&gt;这款十六进制编辑软件, 运行elf模板后可以清晰的将文件格式显示出来, 大致的显示是(坑, 此处应该用图片的)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;                NAME                           Value            Start       Size        Color       Comment
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;struct&lt;/span&gt; file                                                 &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;h          &lt;span style=&#34;color:#f60&#34;&gt;109&lt;/span&gt;Ch
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;struct&lt;/span&gt; elf_header                                       &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;h          &lt;span style=&#34;color:#f60&#34;&gt;34&lt;/span&gt;h
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;struct&lt;/span&gt; program_header_table                             &lt;span style=&#34;color:#f60&#34;&gt;34&lt;/span&gt;h         &lt;span style=&#34;color:#f60&#34;&gt;120&lt;/span&gt;h
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;struct&lt;/span&gt; section_header_table                             &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;B274h      &lt;span style=&#34;color:#f60&#34;&gt;460&lt;/span&gt;h
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;struct&lt;/span&gt; dynamic_symbol_table                             &lt;span style=&#34;color:#f60&#34;&gt;18&lt;/span&gt;Ch        F10h&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到, 一个elf文件中包含一个header, 3个table, 我们一个一个的来分析一下.
首先分析&lt;code&gt;Elf header&lt;/code&gt;, 它位于每一个elf文件开始的地方:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;struct&lt;/span&gt;                                                            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;struct&lt;/span&gt;
{                                                                         {
    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt; e_ident[EI_NIDENT]; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Magic number and other info */&lt;/span&gt;     &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt; e_ident[EI_NIDENT];
    Elf32_Half    e_type;         &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Object file type */&lt;/span&gt;                    Elf64_Half    e_type;     
    Elf32_Half    e_machine;      &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Architecture */&lt;/span&gt;                        Elf64_Half    e_machine;  
    Elf32_Word    e_version;      &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Object file version */&lt;/span&gt;                 Elf64_Word    e_version;  
    Elf32_Addr    e_entry;        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Entry point virtual address */&lt;/span&gt;         Elf64_Addr    e_entry;    
    Elf32_Off e_phoff;        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Program header table file offset */&lt;/span&gt;        Elf64_Off e_phoff;        
    Elf32_Off e_shoff;        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Section header table file offset */&lt;/span&gt;        Elf64_Off e_shoff;        
    Elf32_Word    e_flags;        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Processor-specific flags */&lt;/span&gt;            Elf64_Word    e_flags;    
    Elf32_Half    e_ehsize;       &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* ELF header size in bytes */&lt;/span&gt;            Elf64_Half    e_ehsize;   
    Elf32_Half    e_phentsize;        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Program header table entry size */&lt;/span&gt; Elf64_Half    e_phentsize;
    Elf32_Half    e_phnum;        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Program header table entry count */&lt;/span&gt;    Elf64_Half    e_phnum;    
    Elf32_Half    e_shentsize;        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Section header table entry size */&lt;/span&gt; Elf64_Half    e_shentsize;
    Elf32_Half    e_shnum;        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Section header table entry count */&lt;/span&gt;    Elf64_Half    e_shnum;    
    Elf32_Half    e_shstrndx;     &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Section header string table index */&lt;/span&gt;   Elf64_Half    e_shstrndx; 
} Elf32_Ehdr;                                                              } Elf64_Ehdr;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到, header中包含了magic number, 文件类型, 目标文件版本, 入口地址(如果为0, 说明此文件为可重定位文件), program header的开始地址(即为在so文件中的offset), section header的开始地址, 标志位, elf头本身的大小, program header和section header的size和数量, 最后是section header中string section在section中的下标.(用010 editor可以看到清楚的看到一个.so文件包含众多的program header 和 section header, 这两个段在做.so混淆时会经常分析)&lt;/p&gt;

&lt;p&gt;现在分析&lt;code&gt;program header&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Program segment header.  */&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;struct&lt;/span&gt;                                                      &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;struct&lt;/span&gt;
{                                                                   {
    Elf32_Word    p_type;         &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Segment type */&lt;/span&gt;                    Elf64_Word    p_type;   
    Elf32_Off p_offset;       &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Segment file offset */&lt;/span&gt;                 Elf64_Off p_offset;     
    Elf32_Addr    p_vaddr;        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Segment virtual address */&lt;/span&gt;         Elf64_Addr    p_vaddr;  
    Elf32_Addr    p_paddr;        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Segment physical address */&lt;/span&gt;        Elf64_Addr    p_paddr;  
    Elf32_Word    p_filesz;       &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Segment size in file */&lt;/span&gt;            Elf64_Word    p_filesz; 
    Elf32_Word    p_memsz;        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Segment size in memory */&lt;/span&gt;          Elf64_Word    p_memsz;  
    Elf32_Word    p_flags;        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Segment flags */&lt;/span&gt;                   Elf64_Word    p_flags;  
    Elf32_Word    p_align;        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Segment alignment */&lt;/span&gt;               Elf64_Word    p_align;  
} Elf32_Phdr;                                                       } Elf64_Phdr;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来分析&lt;code&gt;section header&lt;/code&gt;, section相信了解过汇编的同学都非常熟悉了, 这个section header里面就存放了我们elf中各个段的信息.
看一下section header段描述符的结构:(64位的与32位的结构体大致相同, 只是把类型改为了Elf64的类型)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;struct&lt;/span&gt;
{
    Elf32_Word    sh_name;        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Section name (string tbl index) 段名*/&lt;/span&gt;
    Elf32_Word    sh_type;        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Section type 段类型*/&lt;/span&gt;
    Elf32_Word    sh_flags;       &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Section flags 标志位*/&lt;/span&gt;
    Elf32_Addr    sh_addr;        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Section virtual addr at execution 段虚拟地址*/&lt;/span&gt;
    Elf32_Off sh_offset;          &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Section file offset 段偏移*/&lt;/span&gt;
    Elf32_Word    sh_size;        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Section size in bytes 段的长度*/&lt;/span&gt;
    Elf32_Word    sh_link;        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Link to another section 段的链接信息*/&lt;/span&gt;
    Elf32_Word    sh_info;        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Additional section information 段链接的相关信息*/&lt;/span&gt;
    Elf32_Word    sh_addralign;   &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Section alignment 段地址对齐*/&lt;/span&gt;
    Elf32_Word    sh_entsize;     &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Entry size if section holds table 项的长度*/&lt;/span&gt;
} Elf32_Shdr;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后分析动态符号表(&lt;code&gt;symbol table&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;struct&lt;/span&gt;
{
    Elf32_Word    st_name;        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Symbol name (string tbl index) */&lt;/span&gt;
    Elf32_Addr    st_value;       &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Symbol value */&lt;/span&gt;
    Elf32_Word    st_size;        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Symbol size */&lt;/span&gt;
    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt; st_info;        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Symbol type and binding */&lt;/span&gt;
    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt; st_other;       &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Symbol visibility */&lt;/span&gt;
    Elf32_Section st_shndx;       &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Section index */&lt;/span&gt;
} Elf32_Sym;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;包含的信息有符号名, 符号相对应的值, 符号大小, 符号类型和绑定信息, 符号所在的段.&lt;/p&gt;

&lt;h2 id=&#34;android-linker加载-so的源码分析&#34;&gt;Android Linker加载.so的源码分析&lt;/h2&gt;

&lt;p&gt;Android中的本地文件.so是通过Linker加载到内存中去并且执行的.(本文分析的源码为Android4.4.4)
                &amp;mdash;- 推荐一款好用的源码阅读工具 source Insight&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#99f&#34;&gt;java层&lt;/span&gt;:  System.LoadLibrary(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;function&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#99f&#34;&gt;native&lt;/span&gt;:         &lt;span style=&#34;color:#555&#34;&gt;---&amp;gt;&lt;/span&gt;  Dalvik&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;vm&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;native&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;java_lang_Runtime.&lt;span style=&#34;color:#99f&#34;&gt;cpp&lt;/span&gt;: Dalvik_java_lang_Runtime_nativeLoad 
                        &lt;span style=&#34;color:#555&#34;&gt;---&amp;gt;&lt;/span&gt;Dalvik&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;vm&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;Native.&lt;span style=&#34;color:#99f&#34;&gt;cpp&lt;/span&gt;: dvmLoadNativeCode(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; fileName, Object&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; ClassLoader, &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt; reason)
                                &lt;span style=&#34;color:#555&#34;&gt;---&amp;gt;&lt;/span&gt;bionic&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;linker&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;dlfcn.&lt;span style=&#34;color:#99f&#34;&gt;c&lt;/span&gt;: dlopen(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; pathName, RTLD_LAZY)
                                        &lt;span style=&#34;color:#555&#34;&gt;---&amp;gt;&lt;/span&gt;bionic&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;linker&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;linker.&lt;span style=&#34;color:#99f&#34;&gt;cpp&lt;/span&gt;: do_dlopen(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; name, &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; flags)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;核心函数为&lt;code&gt;do_dlopen&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;soinfo&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;do_dlopen&lt;/span&gt;(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; name, &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; flags) {  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 函数的参数为
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; ((flags &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;~&lt;/span&gt;(RTLD_NOW&lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;RTLD_LAZY&lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;RTLD_LOCAL&lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;RTLD_GLOBAL)) &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;) {
        DL_ERR(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;invalid flags to dlopen: %x&amp;#34;&lt;/span&gt;, flags);
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;;
    }
    set_soinfo_pool_protection(PROT_READ &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; PROT_WRITE); &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 设置so信息池的访问权限为可读可写
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    soinfo&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; si &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; find_library(name);                    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 找到name函数, 装载so, 并返回指向.soinfo的指针
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (si &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;) {
                      si&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;CallConstructors();           &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 初始化so库
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    }
    set_soinfo_pool_protection(PROT_READ);              &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 设置so信息池的访问权限为只读
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; si;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;查看&lt;code&gt;find_library&lt;/code&gt;函数可以发现它调用了&lt;code&gt;find_library_internal&lt;/code&gt;函数,&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; soinfo&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;find_library&lt;/span&gt;(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; name) {
    soinfo&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; si &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; find_library_internal(name);
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (si &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;) {
        si&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;ref_count&lt;span style=&#34;color:#555&#34;&gt;++&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; si;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分析&lt;code&gt;find_library_internal&lt;/code&gt;函数, 发现其主要调用了&lt;code&gt;load_library()&lt;/code&gt;函数和 &lt;code&gt;soinfo_link_image()&lt;/code&gt; 函数.
_&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; soinfo&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;find_library_internal&lt;/span&gt;(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; name) {
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (name &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;) {
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; somain;
    }
    soinfo&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; si &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; find_loaded_library(name);         &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 判断.so是否完全加载, 如果加载: 返回有效的指针;如果没有加载, 返回null;
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (si &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;) {                               &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 如果已经加载，返回
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (si&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;flags &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; FLAG_LINKED) {
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; si;
        }
        DL_ERR(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;OOPS: recursive link to &lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;, si&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;name);
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;;
    }

    TRACE(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[ &amp;#39;%s&amp;#39; has not been loaded yet.  Locating...]&amp;#34;&lt;/span&gt;, name);  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 打印so还没有加载
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    si &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; load_library(name);        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 加载.so
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (si &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;) {
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// At this point we know that whatever is loaded @ base is a valid ELF
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// shared library whose segments are properly mapped in.
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    TRACE(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[ init_library base=0x%08x sz=0x%08x name=&amp;#39;%s&amp;#39; ]&amp;#34;&lt;/span&gt;,
            si&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;base, si&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;size, si&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;name);

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#555&#34;&gt;!&lt;/span&gt;soinfo_link_image(si)) {       &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 完成.so的重定位
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        munmap(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&amp;gt;&lt;/span&gt;(si&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;base), si&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;size);
        soinfo_free(si);
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; si;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分析&lt;code&gt;load_library&lt;/code&gt;函数, 会找到elf_read.&lt;code&gt;Load()&lt;/code&gt;方法, 这个方法就是load&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; soinfo&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;load_library&lt;/span&gt;(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; name) {
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Open the file.
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; fd &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; open_library(name);                        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 打开文件, 获取fd
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (fd &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;) {
        DL_ERR(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;library &lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; not found&amp;#34;&lt;/span&gt;, name);
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Read the ELF header and load the segments.
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    ElfReader elf_reader(name, fd);                     &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 初始化elfReader对象
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#555&#34;&gt;!&lt;/span&gt;elf_reader.Load()) {                           &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 通过elfReader对象的Load()方法, 将so文件装载到内存
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; bname &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; strrchr(name, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;);
    soinfo&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; si &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; soinfo_alloc(bname &lt;span style=&#34;color:#555&#34;&gt;?&lt;/span&gt; bname &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; name);    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 分配so_info结构, 并按照装载结果更新相应的成员变量
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (si &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;) {
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;;
    }
    si&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;base &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; elf_reader.load_start();
    si&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;size &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; elf_reader.load_size();
    si&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;load_bias &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; elf_reader.load_bias();
    si&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;flags &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;;
    si&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;entry &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;;
    si&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;dynamic &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;;
    si&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;phnum &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; elf_reader.phdr_count();
    si&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;phdr &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; elf_reader.loaded_phdr();

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; si;
}

&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;这里放一个&lt;/span&gt;&lt;span style=&#34;color:#99f&#34;&gt;ElfReader结构&lt;/span&gt;:
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;ElfReader&lt;/span&gt; {
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt;
    ElfReader(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; name, &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; fd);
    &lt;span style=&#34;color:#555&#34;&gt;~&lt;/span&gt;ElfReader();

    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;Load&lt;/span&gt;();

    size_t &lt;span style=&#34;color:#c0f&#34;&gt;phdr_count&lt;/span&gt;() { &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; phdr_num_; }
    Elf32_Addr &lt;span style=&#34;color:#c0f&#34;&gt;load_start&lt;/span&gt;() { &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;Elf32_Addr&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;(load_start_); }
    Elf32_Addr &lt;span style=&#34;color:#c0f&#34;&gt;load_size&lt;/span&gt;() { &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; load_size_; }
    Elf32_Addr &lt;span style=&#34;color:#c0f&#34;&gt;load_bias&lt;/span&gt;() { &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; load_bias_; }
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; Elf32_Phdr&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;loaded_phdr&lt;/span&gt;() { &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; loaded_phdr_; }

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;bool&lt;/span&gt; ReadElfHeader();
    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;VerifyElfHeader&lt;/span&gt;();
    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;ReadProgramHeader&lt;/span&gt;();
    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;ReserveAddressSpace&lt;/span&gt;();
    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;LoadSegments&lt;/span&gt;();
    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;FindPhdr&lt;/span&gt;();
    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;CheckPhdr&lt;/span&gt;(Elf32_Addr); 

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; name_;
    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; fd_;    

    Elf32_Ehdr header_;
    size_t phdr_num_;   

    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; phdr_mmap_;
    Elf32_Phdr&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; phdr_table_;
    Elf32_Addr phdr_size_;  

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// First page of reserved address space.
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; load_start_;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Size in bytes of reserved address space.
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    Elf32_Addr load_size_;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Load bias.
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    Elf32_Addr load_bias_;

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Loaded phdr.
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; Elf32_Phdr&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; loaded_phdr_;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里是&lt;code&gt;Load()&lt;/code&gt;函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;bool&lt;/span&gt; ElfReader&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;Load() {
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; ReadElfHeader() &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;                   &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 读取
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        VerifyElfHeader() &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 验证
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        ReadProgramHeader() &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;              &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 读取Program header
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        ReserveAddressSpace() &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 根据Program header计算so需要的内存size并分配相应的空间
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        LoadSegments() &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;                   &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 将so按照segment为单位装载到内存
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        FindPhdr();                     &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// on 装载到内存的so中找到program header, 方便以后链接过程use
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;首先是&lt;code&gt;ReadElfHeader&lt;/code&gt;()函数, 发现其是直接调用&lt;code&gt;read&lt;/code&gt;函数读取到header中的.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;bool&lt;/span&gt; ElfReader&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;ReadElfHeader() {
    ssize_t rc &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; TEMP_FAILURE_RETRY(read(fd_, &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt;header_, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(header_)));  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// use read() function 直接将elfheader读取到header中
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;```&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//////////////////////////////
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;true&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;然后是&lt;code&gt;VerifyElfread&lt;/code&gt;()函数, 对Elfheader进行验证识别: 是否为32位，大小端，类型和版本.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;之后&lt;code&gt;ReadProgramHeader&lt;/code&gt;()函数(加载program header table从elf文件到一个只读的私有匿名的mmap-ed block中):&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;bool&lt;/span&gt; ElfReader&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;ReadProgramHeader() {
    phdr_num_ &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; header_.e_phnum;                                        
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//  将program header on内存中中单独映射一份, use于解析时临时use, on so装载到内存后, 便会释放这块内存, 转而使use装载后的so中的program header
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Like the kernel, we only accept program header tables that
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// are smaller than 64KiB.
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (phdr_num_ &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;||&lt;/span&gt; phdr_num_ &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;65536&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(Elf32_Phdr)) {
        DL_ERR(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; has invalid e_phnum: %d&amp;#34;&lt;/span&gt;, name_, phdr_num_);
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;false&lt;/span&gt;;
    }

    Elf32_Addr page_min &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; PAGE_START(header_.e_phoff);
    Elf32_Addr page_max &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; PAGE_END(header_.e_phoff &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; (phdr_num_ &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(Elf32_Phdr)));
    Elf32_Addr page_offset &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; PAGE_OFFSET(header_.e_phoff);  

    phdr_size_ &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; page_max &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; page_min;

    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; mmap_result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; mmap(&lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;, phdr_size_, PROT_READ, MAP_PRIVATE, fd_, page_min);
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (mmap_result &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; MAP_FAILED) {
        DL_ERR(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; phdr mmap failed: %s&amp;#34;&lt;/span&gt;, name_, strerror(errno));
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;false&lt;/span&gt;;
    }

    phdr_mmap_ &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; mmap_result;
    phdr_table_ &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;Elf32_Phdr&lt;span style=&#34;color:#555&#34;&gt;*&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&amp;gt;&lt;/span&gt;(mmap_result) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; page_offset);
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;true&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ReverveAddressSpace&lt;/code&gt;()函数(准备虚拟内存足够的大来存放Program header中的&lt;code&gt;Load&lt;/code&gt;段(两个Load段～～) 通过&lt;code&gt;mmap with PROT_NONE&lt;/code&gt; 实现&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;bool&lt;/span&gt; ElfReader&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;ReserveAddressSpace() {
    Elf32_Addr min_vaddr;
    load_size_ &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; phdr_table_get_load_size(phdr_table_, phdr_num_, &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt;min_vaddr);  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 获取so on 内存中需要的空间load_size
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (load_size_ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;) {
          DL_ERR(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; has no loadable segments&amp;#34;&lt;/span&gt;, name_);
              &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;false&lt;/span&gt;;
    }

    uint8_t&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; addr &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;uint8_t&lt;span style=&#34;color:#555&#34;&gt;*&amp;gt;&lt;/span&gt;(min_vaddr);
    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; start &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; mmap(addr, load_size_, PROT_NONE, mmap_flags, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;);         &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// use mmap匿名映射, 预留出相应的空间
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; mmap_flags &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; MAP_PRIVATE &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; MAP_ANONYMOUS;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (start &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; MAP_FAILED) {
        DL_ERR(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;couldn&amp;#39;t reserve %d bytes of address space for &lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;, load_size_, name_);
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;false&lt;/span&gt;;
    }

    load_start_ &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; start;
    load_bias_ &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;uint8_t&lt;span style=&#34;color:#555&#34;&gt;*&amp;gt;&lt;/span&gt;(start) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; addr;              &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// so可以指定加载的基址, 但是so指定的加载基址可能不是页对齐的, 这种情况
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;true&lt;/span&gt;;                                                            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 会导致实际映射地址和指定的加载地址有一个偏差, 这个偏差便是load_bias
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LoadSegments&lt;/code&gt;()函数(在进程地址空间中加载所有可加载的段(假设你已经预留了空间为这个library)):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;bool&lt;/span&gt; ElfReader&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;LoadSegments() {    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; (size_t i &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; phdr_num_; &lt;span style=&#34;color:#555&#34;&gt;++&lt;/span&gt;i) {
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; Elf32_Phdr&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; phdr &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt;phdr_table_[i];   &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 遍历program header table
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (phdr&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;p_type &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; PT_LOAD) {          &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 加载所有p_type == PT_LOAD的段
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;continue&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;```&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;之后就是一些设置段地址，段偏移&lt;/span&gt;, &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;之后&lt;/span&gt;mmap的一些操作

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;true&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FindPhdr&lt;/code&gt;()(返回program header table加载到内存中的地址, 因为之后还要执行.so的重定位).
现在回到我们&lt;code&gt;find_library_internal&lt;/code&gt;()这里，在执行完load_library()之后, 还有一个重要的函数为 &lt;code&gt;soinfo_link_image&lt;/code&gt;(soinfo* si):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;这个函数会完成&lt;/span&gt;.so的动态链接&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;，其中包含我们加载的&lt;/span&gt;.&lt;span style=&#34;color:#99f&#34;&gt;so库的重定位过程&lt;/span&gt;:
 &lt;span style=&#34;color:#f60&#34;&gt;1.&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;定位动态&lt;/span&gt;section,&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;将动态&lt;/span&gt;section的虚拟地址和项数和读写权限存在dynamic, dynamic_count, dynamic_flags中.
    size_t dynamic_count;
    Elf32_Word dynamic_flags;
    phdr_table_get_dynamic_section(phdr, phnum, base, &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt;si&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;dynamic,     &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 定位dynamic section
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;                                       &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt;dynamic_count, &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt;dynamic_flags);     &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// 
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;
 &lt;span style=&#34;color:#f60&#34;&gt;2.&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;解析&lt;/span&gt;Dynamic section
 &lt;span style=&#34;color:#f60&#34;&gt;3.&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;调用&lt;/span&gt;find_library, &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;返回所有依赖的&lt;/span&gt;.so的soinfo指针并存放在数组中.
 &lt;span style=&#34;color:#f60&#34;&gt;4.&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;重定位&lt;/span&gt;(&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;处理&lt;/span&gt;plt_rel(&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;延迟绑定&lt;/span&gt;)&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;和&lt;/span&gt;rel)&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;可以看到&lt;/span&gt;, &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;处理两个重定位表的函数都是&lt;/span&gt;soinfo_relocate函数.
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (si&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;plt_rel &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;) {
        DEBUG(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[ relocating %s plt ]&amp;#34;&lt;/span&gt;, si&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;name );
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (soinfo_relocate(si, si&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;plt_rel, si&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;plt_rel_count, needed)) {
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;false&lt;/span&gt;;
        }
    }
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (si&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;rel &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;NULL&lt;/span&gt;) {
        DEBUG(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[ relocating %s ]&amp;#34;&lt;/span&gt;, si&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;name );
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (soinfo_relocate(si, si&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;rel, si&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;rel_count, needed)) {       
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;false&lt;/span&gt;;
        }
    }       
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在分析soinfo_relocate函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>分析Android的JNI编程时所使用的一些函数功能</title>
      <link>https://l0phtg.github.io/post/%E5%88%86%E6%9E%90android%E7%9A%84jni%E7%BC%96%E7%A8%8B%E6%97%B6%E6%89%80%E4%BD%BF%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Thu, 16 Mar 2017 03:07:59 +0000</pubDate>
      
      <guid>https://l0phtg.github.io/post/%E5%88%86%E6%9E%90android%E7%9A%84jni%E7%BC%96%E7%A8%8B%E6%97%B6%E6%89%80%E4%BD%BF%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%E5%8A%9F%E8%83%BD/</guid>
      
        <description>&lt;p&gt;分析&lt;strong&gt;jni调用时&lt;/strong&gt;的一些函数及其函数功能.&lt;/p&gt;

&lt;p&gt;如 GetEnv &amp;hellip;&lt;/p&gt;

&lt;p&gt;本文已长草.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;基本类型&#34;&gt;基本类型&lt;/h2&gt;

&lt;p&gt;&lt;jni.h&gt;文件存放的位置在\Android\sdk\ndk-bundle\platforms\android-24\arch-arm\usr\include\jni.h&lt;/p&gt;

&lt;p&gt;现在来看一下jni.h头文件中内容:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;_jobject&lt;/span&gt; {};                                      &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;typedef&lt;/span&gt; _jobject&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;       jobject;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;_jclass&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; _jobject {};                     &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;typedef&lt;/span&gt; _jclass&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;        jclass;         
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;_jstring&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; _jobject {};                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;typedef&lt;/span&gt; _jstring&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;       jstring;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;_jarray&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; _jobject {};                     &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;typedef&lt;/span&gt; _jarray&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;        jarray;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;_jobjectArray&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; _jarray {};                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;typedef&lt;/span&gt; _jobjectArray&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;  jobjectArray;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;_jbooleanArray&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; _jarray {};               &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;typedef&lt;/span&gt; _jbooleanArray&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; jbooleanArray;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;_jbyteArray&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; _jarray {};                  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;typedef&lt;/span&gt; _jbyteArray&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;    jbyteArray;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;_jcharArray&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; _jarray {};                  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;typedef&lt;/span&gt; _jcharArray&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;    jcharArray;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;_jshortArray&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; _jarray {};                 &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;typedef&lt;/span&gt; _jshortArray&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;   jshortArray;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;_jintArray&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; _jarray {};                   &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;typedef&lt;/span&gt; _jintArray&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;     jintArray;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;_jlongArray&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; _jarray {};                  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;typedef&lt;/span&gt; _jlongArray&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;    jlongArray;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;_jfloatArray&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; _jarray {};                 &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;typedef&lt;/span&gt; _jfloatArray&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;   jfloatArray;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;_jdoubleArray&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; _jarray {};                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;typedef&lt;/span&gt; _jdoubleArray&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;  jdoubleArray;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;_jthrowable&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; _jobject {};                 &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;typedef&lt;/span&gt; _jthrowable&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;    jthrowable;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从右边的typedef可以看出,每一个Jni中的cpp类型都有一个Java中的类型与之相对应.&lt;/p&gt;

&lt;p&gt;这里我们重点分析经常看到的_JNIEnv,_JavaVM,JNIEnv,JavaVM&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;struct&lt;/span&gt; _JNIEnv;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;struct&lt;/span&gt; _JavaVM;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;struct&lt;/span&gt; JNINativeInterface&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; C_JNIEnv;

&lt;span style=&#34;color:#099&#34;&gt;#if defined(__cplusplus)
&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;typedef&lt;/span&gt; _JNIEnv JNIEnv;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;typedef&lt;/span&gt; _JavaVM JavaVM;
&lt;span style=&#34;color:#099&#34;&gt;#else
&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;struct&lt;/span&gt; JNINativeInterface&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; JNIEnv;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;struct&lt;/span&gt; JNIInvokeInterface&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; JavaVM;
&lt;span style=&#34;color:#099&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;JNINativeInterface为Native层的接口函数指针表, Jni中的本地函数通过这些接口来调用java层的函数.&lt;/p&gt;

&lt;p&gt;_JNIEnv是一个object, 包含一个指向JNINativeInterface的指针变量function和一些接口函数.&lt;/p&gt;

&lt;p&gt;JNIEnv在cpp中的定义为_JNIEnv, 在c中的定义为 struct JNINativeInterface*.&lt;/p&gt;

&lt;p&gt;JNIEnv: 每一个线程中都有一个属于自己线程的env, 且只在创建自己的线程内有效, 不能跨线程传递.&lt;/p&gt;

&lt;p&gt;下面分析JavaVM:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;struct&lt;/span&gt; _JavaVM {                                                               &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;struct&lt;/span&gt; JNIInvokeInterface {                                                 
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;struct&lt;/span&gt; JNIInvokeInterface&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; functions;                                 &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;       reserved0;
                                                                                &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;       reserved1;
                                                                                &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;       reserved2;
    &lt;span style=&#34;color:#099&#34;&gt;#if defined(__cplusplus)                                                           
&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;&lt;/span&gt;    jint &lt;span style=&#34;color:#c0f&#34;&gt;DestroyJavaVM&lt;/span&gt;()                                                       
    { &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; functions&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;DestroyJavaVM(this); }                                  jint        (&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;DestroyJavaVM)(JavaVM&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;);
    jint &lt;span style=&#34;color:#c0f&#34;&gt;AttachCurrentThread&lt;/span&gt;(JNIEnv&lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt; p_env, &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; thr_args)                    jint        (&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;AttachCurrentThread)(JavaVM&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;, JNIEnv&lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;, &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;);
    { &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; functions&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;AttachCurrentThread(this, p_env, thr_args); }           jint        (&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;DetachCurrentThread)(JavaVM&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;);
    jint &lt;span style=&#34;color:#c0f&#34;&gt;DetachCurrentThread&lt;/span&gt;()                                                  jint        (&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;GetEnv)(JavaVM&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;, jint);
    { &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; functions&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;DetachCurrentThread(this); }                            jint        (&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;AttachCurrentThreadAsDaemon)(JavaVM&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;, JNIEnv&lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;, &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;);
    jint &lt;span style=&#34;color:#c0f&#34;&gt;GetEnv&lt;/span&gt;(&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt; env, jint version)                                      };
    { &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; functions&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;GetEnv(this, env, version); }
    jint AttachCurrentThreadAsDaemon(JNIEnv&lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt; p_env, &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; thr_args)
    { &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; functions&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;AttachCurrentThreadAsDaemon(this, p_env, thr_args); }
    &lt;span style=&#34;color:#099&#34;&gt;#endif &lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/*__cplusplus*/&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;&lt;/span&gt;};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;JavaVM在cpp中定义为_JavaVM, 在c中定义为指向JNIInvokeInterface的指针.
JavaVM只有一个, 因为它是java虚拟机在Jni中的表示.&lt;/p&gt;

&lt;p&gt;在用ida加载.apk中.so文件时会发现识别出来的native函数是这样的:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;Java_com_njctf_mobile_easycrack_MainActivity_parseText&lt;/span&gt;(&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; a1, &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; a2, &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; a3);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;java层的函数调用是这样的:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;native&lt;/span&gt; String &lt;span style=&#34;color:#c0f&#34;&gt;parseText&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;String arg1&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而这里的a1就是我们的env, a2就是jobject或者jclass, a3就是String arg1了.
我们在导入&lt;jni.h&gt;头文件和添加了Structures之后, 就可以对ida中的参数类型和参数名字进行修改了.&lt;/p&gt;

&lt;p&gt;修改之后的结果:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;Java_com_njctf_mobile_easycrack_MainActivity_parseText&lt;/span&gt;(_JNIEnv &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;env, jobject &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;obj, jstring inputString);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>第一篇博文-谈谈CVE-2014-7911</title>
      <link>https://l0phtg.github.io/post/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87-%E8%B0%88%E8%B0%88cve-2014-7911/</link>
      <pubDate>Wed, 01 Mar 2017 20:20:20 +0000</pubDate>
      
      <guid>https://l0phtg.github.io/post/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87-%E8%B0%88%E8%B0%88cve-2014-7911/</guid>
      
        <description>&lt;p&gt;分析一个反序列化漏洞, 以及漏洞的产生的利用过程.&lt;/p&gt;

&lt;p&gt;本文主要内容:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;漏洞成因&lt;/li&gt;
&lt;li&gt;漏洞利用的原理&lt;/li&gt;
&lt;li&gt;基础知识&lt;/li&gt;
&lt;li&gt;漏洞利用流程&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;漏洞成因&#34;&gt;漏洞成因:&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;`java.io.ObjectInputStream`类没有对接受的数据进行验证, 导致可以传入一个不可序列化的对象.&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;利用的原理&#34;&gt;利用的原理:&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;android.os.binderproxy对象时不可序列化的, 并且它涉及到一个native代码可以将mObject和mOrgue当作一个指针.
具体来说就是android.os.BinderProxy对象在gc时会调用一个native的`destory`()函数导致任意代码执行.
`native` 调用链`destroy()--&amp;gt; decStrong() --&amp;gt; refs-&amp;gt;mBase-&amp;gt;onLastStrongRef(id)`&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;基础知识&#34;&gt;基础知识&lt;/h2&gt;

&lt;h3 id=&#34;1-java反序列化分析&#34;&gt;1. Java反序列化分析&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;每个java object在序列化时都有一个序列号, 这是这种机制称为序列化的原因.&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;java.io.ObjectOutputStream可以对对象进行序列化, 它的writeObject()方法可以将序列化后写到一个目标输出流中.
java.io.ObjectInputStream可以对对象进行反序列化, 它的readObject()方法可以从目标输入流中读入序列化的对象并将其反序列化为原对象.
下面以实例来进行分析:
  我们这里定义了一个Employee类(内部有三个实例域和一个构造函数)(其他内部函数已经省略)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;hihihi&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;java.io.*&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;java.util.*&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Employee&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;implements&lt;/span&gt; Serializable
&lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; String name&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;double&lt;/span&gt; salary&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; Date hireDay&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;Employee&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;String n&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;double&lt;/span&gt; s&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; year&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; month&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; day&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
        name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; n&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
        salary &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
        GregorianCalendar calendar &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; GregorianCalendar&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;year&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; month &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; 1&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; day&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
        hireDay &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; calendar&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getTime&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里是我们的测试程序,运行后会在该程序文件目录下产生一个TestEmployee.db的文件, 这个文件内部的数据即使我们序列化Employee类后产生的序列化数据:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;hihihi.*&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;java.io.*&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;java.util.Date&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Test&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#555&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
        BinderProxy bT &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; BinderProxy&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
        Employee bE &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; Employee&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;hi&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; 150&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; 2017&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; 3&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; 9&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
        Date bD &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; Date&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// FileOutputStream fos= new FileOutputStream(&amp;#34;TestStream.db&amp;#34;);
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// ObjectOutputStream os = new ObjectOutputStream(fos); 
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// os.writeObject(bT);
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// os.close();
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;
        FileOutputStream fosr &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; FileOutputStream&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;TestEmployee.db&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
        ObjectOutputStream osr &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; ObjectOutputStream&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;fosr&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
        osr&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;writeObject&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;bE&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
        osr&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;close&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;    

        ObjectInputStream fisr &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; ObjectInputStream&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; FileInputStream&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;TestEmployee.db&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;));&lt;/span&gt;
        Object newEmployee &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fisr&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;readObject&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
        fisr&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;close&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
        System&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;newEmployee&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;    
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// FileOutputStream fosd = new FileOutputStream(&amp;#34;TestData.db&amp;#34;);
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// ObjectOutputStream osd = new ObjectOutputStream(fosd);
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// osd.writeObject(bD);
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// osd.close();
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;简单说一下序列化后的数据:(参看&lt;code&gt;&amp;lt;&amp;lt;java核心技术(卷2)&amp;gt;&amp;gt;&lt;/code&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;每个文件的Magic Number 为:  &amp;#39;AC ED&amp;#39;
后面紧跟对象序列化的版本号: Ex: &amp;#39;00 05&amp;#39;
字符串对象被保存为: 74  2字节表示的字符串长度 字符
当存储一个对象时:   72  2字节的类名长度    类名   8字节长的指纹(serial ID)   1字节长的标志  2字节长的数据域描述符的数量 数据域描述符  结束标志78 超类类型(没有的话, 为70)&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;2-java和android的gc机制&#34;&gt;2. Java和Android的GC机制&lt;/h3&gt;

&lt;p&gt;Java对象的生命周期和垃圾回收:(从网上摘录.侵删)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;创建对象的方式:

&lt;ul&gt;
&lt;li&gt;使用new语句创建对象;&lt;/li&gt;
&lt;li&gt;使用反射, 调用java.lang.Class或java.lang.reflect.Constructor的newInstance()实例方法;&lt;/li&gt;
&lt;li&gt;调用对象的clone()方法;&lt;/li&gt;
&lt;li&gt;使用反序列化手段, 调用java.io.ObjectInputStream对象的readObject()方法.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;垃圾回收:
对象的可触及性:

&lt;ul&gt;
&lt;li&gt;可触及状态: 当一个对象被创建后, 只要还有引用变量引用该对象, 那么它就始终处于可触及状态;&lt;/li&gt;
&lt;li&gt;可复活状态: 当程序不再有任何变量引用对象时, 它就进入可复活状态, 该状态的对象, 垃圾回收器会准备释放它的内存, 在释放前, 会调用它的finalize()方法, 这些finlize方法可能使对象重新转到可触及状态;&lt;/li&gt;
&lt;li&gt;不可触及状态: 当JVM执行完所有的可复活状态的finalize()方法之后, 假设这些方法都没有使对象转到可触及状态. 那么该对象就进入了不可触及状态. 只有对象处于不可触及状态时, 垃圾回收器才会真正回收它占用的内存.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;3-android的binder机制简介-网上有很多分析binder机制的文章-这里就直接给出一个简单的定义&#34;&gt;3. Android的Binder机制简介(网上有很多分析Binder机制的文章, 这里就直接给出一个简单的定义);&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;binder是Android提供的一种IPC通信机制，方便进程之间交换数据。binder的实现包括一个公共的顶层服务接口，同时实现了这个公共顶层接口的proxy代理端和service端。binder driver充当通信媒介。&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;4-c-对象内存布局&#34;&gt;4. C++ 对象内存布局:&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;C++中, 对象的内存布局为先放父类, 然后放自己的成员, 如果有虚函数, 内存中会有一个放虚函数表的位置在最开始处.&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;5-堆喷射&#34;&gt;5. 堆喷射:&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;原因(为什么要用到堆喷射技术): 控制的rip指针指向的地址是在一个范围内随机变化的, 而我们可以对rip指向的区域进行写操作.
方式: 通过构造特殊的内存布局, 使无论rip指向哪里, 它都会`最终`跳转到一个固定的地址处&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;6-rop&#34;&gt;6. ROP&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;在可以控制rip指针后, 我们可以在程序加载的.so中找到一些特定的gadget, 利用内存复写技术, 来控制最终执行system函数(也就是拿到了system权限)&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;漏洞利用流程&#34;&gt;漏洞利用流程&lt;/h2&gt;

&lt;h3 id=&#34;1-触发gc机制&#34;&gt;1. 触发GC机制&lt;/h3&gt;

&lt;p&gt;BinderProxy的finalize方法调用了native的方法, 会将我们的mOruge处理为指针.&lt;/p&gt;

&lt;h3 id=&#34;2-分析native方法&#34;&gt;2. 分析native方法:&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;        ------------为了我们能够正确的控制指针指针我们期望的地址，而不会让system_server crash掉&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#99f&#34;&gt;destory在native层的调用逻辑&lt;/span&gt;:
    &lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;Core&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;jni&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;android_util_Binder.cpp   &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; android_os_BinderProxy_destroy(JNIEnv&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; env, jobject obj)
        &lt;span style=&#34;color:#555&#34;&gt;-----&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;libs&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;utils&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;RefBase.cpp    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; RefBase&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;decStrong(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; id) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt;
            &lt;span style=&#34;color:#555&#34;&gt;-----&amp;gt;&lt;/span&gt; int32_t android_atomic_dec(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;volatile&lt;/span&gt; int32_t&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; addr)          &lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;system&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;core&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;libcutils&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;atomic.c
            &lt;span style=&#34;color:#555&#34;&gt;-----&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;libs&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;utils&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;RefBase.cpp   &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; RefBase&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;onLastStrongRef(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/*id*/&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结合下面的代码分析:&lt;/p&gt;

&lt;p&gt;传入的object对象即是我们恶意构造的对象, 通过GetIntField()可以获得该对象中的实例域mObject和mOrgue&lt;/p&gt;

&lt;p&gt;注意到它将实例域赋值到drl后, 掉了drl-&amp;gt;decStrong() 函数&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;drl可控, 即传入的this可控, drl为指向DeathRecipientList的指针&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;  在decStrong函数中
    * 首先 refs = mRefs,                        即让refs = *(mOruge + 4)
    * 调用refs-&amp;gt;removeStrongRef(id)             空实现
    * c = android_atomic_dec(&amp;amp;refs-&amp;gt;mStrong)    c = *(mOruge + 4) == 1
    * if (c == 1): then ....    BLX r2          r2 = * (*(*(*(mOrgue + 4) + 8)) + 12)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样就完成了对rip的控制, 通过在system_server内存空间的dalvik-heap中进行堆喷射和合理的布置gadget, 就可以完成到system权限的提升.&lt;/p&gt;

&lt;p&gt;(具体代码可参照retme的&lt;a href=&#34;https://github.com/retme7/CVE-2014-7911_poc&#34;&gt;https://github.com/retme7/CVE-2014-7911_poc&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;DecStrong的汇编代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;color:#c0f&#34;&gt;PUSH&lt;/span&gt;            &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#360&#34;&gt;R4-R6&lt;/span&gt;,&lt;span style=&#34;color:#360&#34;&gt;LR&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#c0f&#34;&gt;MOV&lt;/span&gt;             &lt;span style=&#34;color:#360&#34;&gt;R5&lt;/span&gt;, &lt;span style=&#34;color:#360&#34;&gt;R0&lt;/span&gt;
&lt;span style=&#34;color:#c0f&#34;&gt;LDR&lt;/span&gt;             &lt;span style=&#34;color:#360&#34;&gt;R4&lt;/span&gt;, [&lt;span style=&#34;color:#360&#34;&gt;R0&lt;/span&gt;,&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#4]             r4   = *(r0 + 4)
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#360&#34;&gt;MOV&lt;/span&gt;             &lt;span style=&#34;color:#360&#34;&gt;R6&lt;/span&gt;, &lt;span style=&#34;color:#360&#34;&gt;R1&lt;/span&gt;
&lt;span style=&#34;color:#c0f&#34;&gt;MOV&lt;/span&gt;             &lt;span style=&#34;color:#360&#34;&gt;R0&lt;/span&gt;, &lt;span style=&#34;color:#360&#34;&gt;R4&lt;/span&gt;
&lt;span style=&#34;color:#c0f&#34;&gt;BLX&lt;/span&gt;             &lt;span style=&#34;color:#360&#34;&gt;android_atomic_dec&lt;/span&gt;
&lt;span style=&#34;color:#c0f&#34;&gt;CMP&lt;/span&gt;             &lt;span style=&#34;color:#360&#34;&gt;R0&lt;/span&gt;, &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#1
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#360&#34;&gt;BNE&lt;/span&gt;             &lt;span style=&#34;color:#360&#34;&gt;loc_D184&lt;/span&gt;
&lt;span style=&#34;color:#c0f&#34;&gt;LDR&lt;/span&gt;             &lt;span style=&#34;color:#360&#34;&gt;R0&lt;/span&gt;, [&lt;span style=&#34;color:#360&#34;&gt;R4&lt;/span&gt;,&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#8]             r0   = *(r4 + 8)
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#360&#34;&gt;MOV&lt;/span&gt;             &lt;span style=&#34;color:#360&#34;&gt;R1&lt;/span&gt;, &lt;span style=&#34;color:#360&#34;&gt;R6&lt;/span&gt;
&lt;span style=&#34;color:#c0f&#34;&gt;LDR&lt;/span&gt;             &lt;span style=&#34;color:#360&#34;&gt;R3&lt;/span&gt;, [&lt;span style=&#34;color:#360&#34;&gt;R0&lt;/span&gt;]                &lt;span style=&#34;color:#360&#34;&gt;r3&lt;/span&gt;   &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;=&lt;/span&gt; *(&lt;span style=&#34;color:#360&#34;&gt;r0&lt;/span&gt;)
&lt;span style=&#34;color:#c0f&#34;&gt;LDR&lt;/span&gt;             &lt;span style=&#34;color:#360&#34;&gt;R2&lt;/span&gt;, [&lt;span style=&#34;color:#360&#34;&gt;R3&lt;/span&gt;,&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#0xC]           r2   = *(r3 + 0xc)
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#360&#34;&gt;BLX&lt;/span&gt;             &lt;span style=&#34;color:#360&#34;&gt;R2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;native执行代码:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;android_os_BinderProxy_destroy&lt;/span&gt;(JNIEnv&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; env, jobject obj)
{
    IBinder&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; b &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (IBinder&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;)
    env&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;GetIntField(obj, gBinderProxyOffsets.mObject);
    DeathRecipientList&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; drl &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (DeathRecipientList&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;)
    env&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;GetIntField(obj, gBinderProxyOffsets.mOrgue);

    LOGDEATH(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Destroying BinderProxy %p: binder=%p drl=%p&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;, obj, b, drl);
    env&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;SetIntField(obj, gBinderProxyOffsets.mObject, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;);
    env&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;SetIntField(obj, gBinderProxyOffsets.mOrgue, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;);
    drl&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;decStrong((&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;)javaObjectForIBinder);
    b&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;decStrong((&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;)javaObjectForIBinder);

    IPCThreadState&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;self()&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;flushCommands();
}

&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; RefBase&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;decStrong(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; id) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt;
{
    weakref_impl&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; refs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; mRefs;
    refs&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;removeStrongRef(id);
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; int32_t c &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; android_atomic_dec(&lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt;refs&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;mStrong);
    ...
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (c &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;) {
        refs&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;mBase&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;onLastStrongRef(id);
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; ((refs&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;mFlags&lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt;OBJECT_LIFETIME_MASK) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; OBJECT_LIFETIME_STRONG) {
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;delete&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;this&lt;/span&gt;;
        }
    }
    refs&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;decWeak(id);
}

&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; RefBase&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;onLastWeakRef(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/*id*/&lt;/span&gt;)
{
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
  </channel>
</rss>